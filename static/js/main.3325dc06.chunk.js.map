{"version":3,"sources":["utils/app.ts","components/spinner/spinner.tsx","api/base.ts","api/typings.ts","api/kinopub.ts","api/client.ts","components/text/text.tsx","components/icon/icon.tsx","hooks/useButtonEffect.ts","components/spottable/spottable.tsx","hooks/useApiMutation.ts","hooks/useStorageState.ts","components/link/link.tsx","utils/keyboard.ts","../node_modules/ilib/lib sync /^$","hooks/useDeviceInfo.ts","storage.ts","routes.ts","utils/logging.ts","utils/enviroment.ts","components/router/router.tsx","layouts/fill/fill.tsx","containers/menu/menu.tsx","layouts/main/main.tsx","components/view/view.tsx","hooks/useDeviceAuthorizationEffect.ts","containers/views/views.tsx","App/App.tsx","reportWebVitals.ts","serviceWorkerRegistration.ts","index.tsx","utils/analytics.ts"],"names":["pkg","require","APP_TITLE","description","APP_INFO","name","version","APP_VERSION","Spinner","className","cx","Bool","WatchingStatus","encodeParam","param","encodeURIComponent","value","Object","params","JSON","stringify","_","normalizeParams","keys","filter","key","undefined","map","isArray","idx","join","normalizeArrayParams","BaseApiClient","baseUrl","this","startsWith","window","location","protocol","method","url","data","accessToken","getAccessToken","access_token","fetch","body","serialize","response","status","clearTokens","json","error","toString","request","Error","refresh_token","expires_in","KINOPUB_API_BASE_URL","process","KINOPUB_API_CLIENT_ID","KINOPUB_API_CLIENT_SECRET","ApiClient","storage","getItem","Cookies","get","setItem","set","expires","forEach","remove","removeItem","clientId","clientSecret","accessTokenCheckIntervaId","clearInterval","deviceInfo","onSuccess","clearTimers","saveTokens","deviceNotify","onConfirm","requestDeviceCode","interval","code","user_code","verification_uri","Promise","resolve","reject","setInterval","a","requestTokens","processTokensReponse","post","grant_type","client_id","client_secret","refreshToken","getRefreshToken","refreshTokens","requestUserCode","deviceAuthorization","deviceUnlink","id","settings","page","perpage","nolinks","True","mid","file","type","like","sid","item","title","folder","video","season","subscribed","time","sort","Text","as","As","props","ICONS_MAP","notifications_active","new_releases","library_music","live_tv","play_arrow","play_circle_outline","sports_soccer","expand_more","expand_less","emoji_emotions","auto_awesome","visibility_off","closed_caption","thumb_up","graphic_eq","filter_list","arrow_back","Icon","useButtonEffect","handler","useEffect","registerButtonHandler","Spottable","Item","useApiMutation","client","useMemo","mutation","useMutation","assign","mutate","mutateAsync","useStorageState","defaultValue","useState","_setValue","setValue","useCallback","newValue","expire","listener","unsubscribe","subscribe","Link","href","state","children","icon","iconOnly","replace","active","onClick","history","useHistory","handleOnClick","push","role","BUTTON_HANDLERS","KeyboardCodes","Enter","Play","Pause","PlayPause","Back","Backspace","Escape","ArrowLeft","ArrowUp","ArrowRight","ArrowDown","Red","Green","Yellow","Blue","Settings","isKey","e","castArray","keyCode","which","some","isBackButton","addEventListener","isBack","preventDefault","stopPropagation","h","triggerButtonClick","dispatchEvent","KeyboardEvent","webpackEmptyContext","req","module","exports","useDeviceInfo","software","setSoftware","hardware","setHardware","platform","detect","navigator","platformName","deviceinfo","device","modelName","sdkVersion","prefix","parse","Date","now","MyStorage","localStorage","listeners","l","emit","requestAnimationFrame","createSessionStorage","sessionStorage","PATHS","Index","Home","Search","Watching","Releases","Category","Genre","Channels","Channel","Bookmarks","Bookmark","Collections","Collection","History","Video","Trailer","Pair","Donate","Speed","generatePath","pattern","search","query","URLSearchParams","baseGeneratePath","Sentry","release","dsn","integrations","TracingIntegrations","BrowserTracing","tracesSampleRate","IS_WEB","origin","Router","FillLayout","menuItems","Boolean","categoryType","genreType","REACT_APP_HIDE_DONATE_MENU","Menu","useLocation","list","pathname","MainLayout","rest","View","component","layout","Layout","render","routeProps","fallback","createElement","useDeviceAuthorizationEffect","onAuthorization","deviceAuthorizationAsync","isAuthorized","setIsAuthorized","isLogged","handleOnConfirm","userCode","verificationUri","timeoutId","setTimeout","exception","clearTimeout","Views","showNotice","setShowNotice","showSpinner","setShowSpinner","authorizationStep","setAuthorizationStep","handleBackButtonClick","goBack","close","handleAuthorization","path","BookmarkView","React","lazy","BookmarksView","CategoryView","GenreView","ChannelView","ChannelsView","CollectionView","CollectionsView","HistoryView","HomeView","IndexView","ItemView","NotFoundView","PairView","SearchView","SettingsView","DonateView","SpeedView","TrailerView","VideoView","WatchingView","ReleasesView","queryClient","QueryClient","defaultOptions","queries","staleTime","MoonstoneDecorator","QueryClientProvider","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","catch","app","document","getElementById","URL","headers","contentType","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","confirm","delta","gtag","metric_id","metric_value","metric_delta"],"mappings":"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","file":"static/js/main.3325dc06.chunk.js","sourcesContent":["const pkg = require('../../package.json');\n\nexport const APP_TITLE = pkg.description;\nexport const APP_INFO = `${pkg.name} ${pkg.version}`;\nexport const APP_VERSION = pkg.version;\n","import cx from 'classnames';\n\ntype Props = {\n  className?: string;\n};\n\nconst Spinner: React.FC<Props> = ({ className }) => {\n  return (\n    <div className=\"fixed z-50 top-0 left-0 right-0 bottom-0 flex justify-center items-center\">\n      <i className={cx('animate-spin w-10 h-10 rounded-full border-t-4', className)} />\n    </div>\n  );\n};\n\nexport default Spinner;\n","import isArray from 'lodash/isArray';\nimport { serialize } from 'object-to-formdata';\n\ntype Primitive = string | number | boolean;\n\ntype Param = Primitive | null | undefined | Param[] | { [key: string]: Param };\n\ntype Params = Record<string, Param> | null;\n\nfunction isPrimitive(value: any): value is Primitive {\n  return value !== Object(value);\n}\n\nexport const stringifyParams = (params?: Params) =>\n  JSON.stringify(params, (_, value) => {\n    if (value === null || value === '') {\n      return undefined;\n    }\n\n    return value;\n  });\n\nexport const encodeParam = (param: Param) =>\n  encodeURIComponent(isPrimitive(param) ? (param as Primitive) : stringifyParams(param as Record<string, Param>));\n\nexport const normalizeArrayParams = (key: string, params: Param[]) =>\n  params.map((param, idx) => `${encodeParam(`${key}[${idx}]`)}=${encodeParam(param)}`).join('&');\n\nexport const normalizeParams = (params?: Params) =>\n  Object.keys(params || {})\n    .filter((key) => params?.[key] !== '' && params?.[key] !== null && params?.[key] !== undefined)\n    .map((key) => (isArray(params?.[key]) ? normalizeArrayParams(key, params?.[key]! as Param[]) : `${key}=${encodeParam(params?.[key])}`))\n    .join('&');\n\nclass BaseApiClient {\n  protected baseUrl: string;\n\n  constructor(baseUrl: string) {\n    this.baseUrl = baseUrl.startsWith('http')\n      ? baseUrl\n      : window.location.protocol.startsWith('http')\n      ? `${window.location.protocol}//${baseUrl}`\n      : `http://${baseUrl}`;\n  }\n\n  private async request<T>(method: 'GET' | 'POST', url: string, params?: Params, data?: Params) {\n    const accessToken = this.getAccessToken();\n\n    if (accessToken && !params?.['grant_type']) {\n      params = {\n        ...params,\n        access_token: accessToken,\n      };\n    }\n\n    try {\n      const response = await fetch(`${this.baseUrl}${url}?${normalizeParams(params)}`, {\n        method,\n        body: data && serialize(data),\n      });\n\n      if (response.status === 401) {\n        this.clearTokens();\n      }\n\n      const json = await response.json();\n\n      return json as T;\n    } catch (ex) {\n      return {\n        error: (ex as Error).toString(),\n      } as unknown as T;\n    }\n  }\n\n  protected get<T>(url: string, params?: Params) {\n    return this.request<T>('GET', url, params);\n  }\n\n  protected post<T>(url: string, data?: Params, params?: Params) {\n    return this.request<T>('POST', url, params, data);\n  }\n\n  protected getAccessToken(): string {\n    throw new Error('not implemented');\n  }\n\n  protected getRefreshToken(): string {\n    throw new Error('not implemented');\n  }\n\n  protected saveTokens({\n    access_token,\n    refresh_token,\n    expires_in,\n  }: {\n    access_token: string;\n    refresh_token: string;\n    expires_in: number;\n  }): void | Promise<void> {\n    throw new Error('not implemented');\n  }\n\n  protected clearTokens(): void | Promise<void> {\n    throw new Error('not implemented');\n  }\n}\n\nexport default BaseApiClient;\n","/* eslint-disable no-shadow */\n\nexport enum Bool {\n  True = 1,\n  False = 0,\n}\n\nexport type Streaming = 'http' | 'hls' | 'hls2' | 'hls4';\n\nexport type DeviceInfo = {\n  /**\n   * Название устройства.\n   */\n  title: string;\n\n  /**\n   * Информация по “железу” устройства.\n   */\n  hardware: string;\n\n  /**\n   * Информация по софту устройства.\n   */\n  software: string;\n};\n\nexport type User = {\n  username: string;\n  reg_date: number;\n  subscription: {\n    active: boolean;\n    end_time: number;\n    days: number;\n  };\n  profile: {\n    name: string;\n    avatar: string;\n  };\n};\n\nexport type ServerLocation = {\n  id: string;\n  location: string;\n  name: string;\n};\n\nexport type StreamingType = {\n  id: string;\n  code: Streaming;\n  name: string;\n  description: string;\n};\n\nexport type VoiceoverType = {\n  id: string;\n  title: string;\n  short_title: string;\n};\n\nexport type VoiceoverAuthor = {\n  id: string;\n  title: string;\n  short_title: string;\n};\n\nexport type VideoQuality = {\n  id: string;\n  title: string;\n  quality: number;\n};\n\nexport type Type = {\n  id: string;\n  title: string;\n};\n\nexport type Gender = {\n  id: string;\n  title: string;\n  type: string;\n};\n\nexport type Country = {\n  id: string;\n  title: string;\n};\n\nexport type DeviceSettingBoolean = {\n  type: undefined;\n  label: string;\n  value: Bool;\n};\n\nexport type DeviceSettingList = {\n  type: 'list';\n  label: string;\n  value: {\n    id: string;\n    label: string;\n    description: string;\n    selected: Bool;\n  }[];\n};\n\nexport type DeviceSettings = {\n  /**\n   * Поддерживает ли устройство SSL\n   */\n  supportSsl: DeviceSettingBoolean;\n\n  /**\n   * Поддерживает ли устройство HEVC\n   */\n  supportHevc: DeviceSettingBoolean;\n\n  /**\n   * Поддерживает ли устройство HDR (10bit color)\n   */\n  supportHdr: DeviceSettingBoolean;\n\n  /**\n   * Поддерживает ли устройство UHD/4K\n   */\n  support4k: DeviceSettingBoolean;\n\n  /**\n   * На данный момент только для HLS4, плейлист строится из всех доступных файлов AVC+HEVC\n   */\n  mixedPlaylist: DeviceSettingBoolean;\n\n  /**\n   * Типа стриминга\n   */\n  streamingType: DeviceSettingList;\n\n  /**\n   * Регион, откуда получать контент\n   */\n  serverLocation: DeviceSettingList;\n};\n\nexport type Device = {\n  id: string;\n  title: string;\n  hardware: string;\n  software: string;\n  created: number;\n  updated: number;\n  last_seen: number;\n  is_browser: number;\n  settings: DeviceSettings;\n};\n\nexport type Tracklist = {\n  /**\n   * Исполнитель\n   */\n  artist: string;\n\n  /**\n   * Название композиции\n   */\n  title: string;\n\n  /**\n   * Ссылка на аудио файл\n   */\n  url: string;\n};\n\nexport type Subtitle = {\n  lang: string;\n\n  /**\n   * Смещение относительно видео-потока\n   */\n  shift: number;\n\n  /**\n   * Доступно в файле-исходнике, вшиты в него отдельным стримом\n   */\n  embed: boolean;\n\n  /**\n   * Форсированные субтитры (перевод вывисок, других языков и тд)\n   */\n  forced: boolean;\n\n  file: string;\n\n  url: string;\n};\n\nexport type Audio = {\n  id: string;\n  index: number;\n  codec: 'aac' | 'ac3';\n  channels: number;\n  lang: string;\n  type?: {\n    id: string;\n    title: string;\n    short_title?: string;\n  };\n  author?: {\n    id: string;\n    title: string;\n    short_title?: string;\n  };\n};\n\nexport type File = {\n  w: number;\n  h: number;\n  codec: string;\n  quality: string;\n  quality_id: string;\n  file: string;\n  url: {\n    http: string;\n    hls?: string;\n    hls2?: string;\n    hls4?: string;\n  };\n};\n\nexport type Trailer = {\n  id: string;\n  url: string;\n  files?: File[];\n};\n\nexport type Posters = {\n  small: string;\n  medium: string;\n  big: string;\n  wide?: string;\n};\n\nexport enum WatchingStatus {\n  NoWatched = -1,\n  Watching = 0,\n  Watched = 1,\n}\n\nexport type Video = {\n  id: string;\n\n  title: string;\n  thumbnail: string;\n\n  number: number;\n  snumber: number;\n\n  /**\n   * Время в секундах\n   */\n  duration: number;\n\n  /**\n   * Статус просмотра эпизода: -1 не смотрели вообще, 0 - начали смотреть, 1 - просмотрели\n   */\n  watched: WatchingStatus;\n\n  watching: {\n    /**\n     * Статус просмотра эпизода: -1 не смотрели вообще, 0 - начали смотреть, 1 - просмотрели\n     */\n    status: WatchingStatus;\n\n    /**\n     * Время просмотра в секундах\n     */\n    time: number;\n  };\n  /**\n   * Номера аудио-дорожек ('1,2,3,4')\n   */\n  tracks: string[];\n  subtitles: Subtitle[];\n  audios: Audio[];\n  files: File[];\n  ac3: Bool;\n};\n\nexport type Season = {\n  id: string;\n\n  /**\n   * Название сезона\n   */\n  title: string;\n\n  number: number;\n\n  episodes: Video[];\n\n  /**\n   * Статус просмотра эпизода: -1 не смотрели вообще, 0 - начали смотреть, 1 - просмотрели\n   */\n  watched: WatchingStatus;\n\n  watching: {\n    /**\n     * Статус просмотра эпизода: -1 не смотрели вообще, 0 - начали смотреть, 1 - просмотрели\n     */\n    status: WatchingStatus;\n\n    /**\n     * Время просмотра в секундах\n     */\n    time: number;\n  };\n};\n\nexport type Item = {\n  id: string;\n\n  /**\n   * Название / Оригинальное название\n   */\n  title: string;\n\n  /**\n   * Тип контента\n   */\n  type: string;\n\n  /**\n   * Подтип контента, бывают многосерийные фильмы, концерты\n   */\n  subtype: 'multi' | string;\n  year: number;\n  cast: string;\n  director: string;\n  voice: string;\n\n  created_at: number;\n\n  updated_at: number;\n\n  /**\n   * Продолжительность фильма/сериала\n   */\n  duration: {\n    /**\n     * Средняя продолжительность для сериалов, полная для фильмов\n     */\n    average: number;\n\n    /**\n     * Общая продолжительность фильма, сериала\n     */\n    total: number;\n  };\n\n  /**\n   * Количество аудио дорожек\n   */\n  langs: number;\n\n  /**\n   * Присутствуют или нет AC-3 аудио\n   */\n  ac3: Bool;\n\n  /**\n   * Количество субтитров\n   */\n  subtitles: number;\n\n  /**\n   * Качество фильма, для сериалов берется наибольшее количество серий с определенным качеством\n   */\n  quality: number;\n\n  poor_quality: boolean;\n\n  genres: Gender[];\n  countries: Country[];\n\n  /**\n   * Описание фильма\n   */\n  plot: string;\n\n  tracklist: Tracklist[];\n  imdb: number;\n  imdb_rating: number;\n  imdb_votes: number;\n  kinopoisk: number;\n  kinopoisk_rating: number;\n  kinopoisk_votes: number;\n  rating: number;\n  rating_votes: number;\n  rating_percentage: number;\n  views: number;\n  comments: number;\n\n  /**\n   * Для сериалов: true - окончен, false - снимается\n   */\n  finished: boolean;\n\n  /**\n   * Присутствуют посторонние вставки рекламы\n   */\n  advert: boolean;\n\n  /**\n   * Подписан ли пользователь на сериал\n   */\n  in_watchlist: true;\n\n  /**\n   * Подписан ли пользователь на сериал, alias in_watchlist\n   */\n  subscribed: true;\n\n  bookmarks: {\n    id: string;\n    title: string;\n  }[];\n\n  posters: Posters;\n  trailer: Trailer;\n\n  /**\n   * Всего эпизодов\n   */\n  total?: number;\n\n  /**\n   * Просмотренных эпизодов\n   */\n  watched?: number;\n\n  /**\n   * Новых/недосмотренных эпизовод\n   */\n  new?: number;\n};\n\nexport type ItemDetails = {\n  videos?: Video[];\n  seasons?: Season[];\n} & Item;\n\nexport type Comment = {\n  id: string;\n  depth: number;\n  unread: boolean;\n  deleted: boolean;\n  message: string;\n  created: number;\n  rating: number;\n  user: {\n    id: string;\n    name: string;\n    avatar: string;\n  };\n};\n\nexport type Channel = {\n  id: string;\n  title: string;\n  name: string;\n  logos: {\n    s: string;\n    m: string;\n  };\n  stream: string;\n};\n\nexport type Bookmark = {\n  id: string;\n  title: string;\n  views: number;\n  count: number;\n  created: number;\n  updated: number;\n};\n\nexport type Collection = {\n  id: string;\n  title: string;\n  watchers: number;\n  views: number;\n  created: number;\n  updated: number;\n  posters: Posters;\n};\n\nexport type HistoryItem = {\n  /**\n   * Время где остановились\n   */\n  time: number;\n\n  /**\n   * Сколько раз смотрели данный media\n   */\n  counter: number;\n\n  /**\n   * Когда впервые посмотрели media\n   */\n  first_seen: number;\n\n  /**\n   * Когда последний раз посмотрели media\n   */\n  last_seen: number;\n\n  /**\n   * Описание item\n   */\n  item: Item;\n\n  /**\n   * Описание media\n   */\n  media: Video;\n};\n\nexport type Pagination = {\n  total: number;\n  current: number;\n  perpage: number;\n  total_items?: number;\n};\n\nexport type OnConfirm = (userCode: string, verificationUri: string) => void | Promise<void>;\n\nexport type Response = {\n  status?: number;\n  error?: string;\n  error_description?: string;\n};\n\nexport type PaginationResponse = {\n  pagination: Pagination;\n} & Response;\n\nexport type DeviceCodeResponse = {\n  /**\n   * Код, для дальнейшего получения access token'a\n   */\n  code: string;\n\n  /**\n   * Код который нужно показать пользователю\n   */\n  user_code: string;\n\n  /**\n   * URL где нужно ввести пользовательский код\n   */\n  verification_uri: string;\n\n  /**\n   * Через сколько данный device_code перестанет быть валидным\n   */\n  expires_in: number;\n\n  /**\n   * Интервал в секундах, через который посылать запросы на проверку активацииs\n   */\n  interval: number;\n} & Response;\n\nexport type TokensResponse = {\n  /**\n   * Токен, который требуется для обращения к API\n   */\n  access_token: string;\n\n  /**\n   * Тип токена (bearer)\n   */\n  token_type: string;\n\n  /**\n   * Через сколько данный access_token перестанет быть валидным\n   */\n  expires_in: number;\n\n  /**\n   * Токен, с помощью которого можно получать access_token без получения device_code\n   */\n  refresh_token: string;\n} & Response;\n\nexport type UserReponse = {\n  user: User;\n} & Response;\n\nexport type ServerLocationsReponse = {\n  items: ServerLocation[];\n} & Response;\n\nexport type StreamingTypesReponse = {\n  items: StreamingType[];\n} & Response;\n\nexport type VoiceoverTypesResponse = {\n  items: VoiceoverType[];\n} & Response;\n\nexport type VoiceoverAuthorsResponse = {\n  items: VoiceoverAuthor[];\n} & Response;\n\nexport type VideoQualitiesResponse = {\n  items: VideoQuality[];\n} & Response;\n\nexport type DevicesResponse = {\n  devices: Device[];\n} & Response;\n\nexport type DeviceInfoResponse = {\n  device: Device;\n} & Response;\n\nexport type DeviceRemoveResponse = {\n  /**\n   * Указывает, что данный запрос вызван текущим устройством или нет.\n   * Удаление текущего устройства/браузера равносильно логауту.\n   */\n  current: boolean;\n} & Response;\n\nexport type DeviceSettingsResponse = {\n  settings: DeviceSettings;\n} & Response;\n\nexport type DeviceSettingsParams = {\n  [key in keyof DeviceSettings]?: DeviceSettings[key] extends DeviceSettingBoolean ? boolean : number;\n};\n\nexport type TypesResponse = {\n  items: Type[];\n} & Response;\n\nexport type GendersResponse = {\n  items: Gender[];\n} & Response;\n\nexport type CountriesResponse = {\n  items: Country[];\n} & Response;\n\nexport type SubtitlesResponse = {\n  items: { id: string; title: string }[];\n} & Response;\n\nexport type ItemType = 'movie' | 'serial' | 'tvshow' | 'concert' | 'documovie' | 'docuserial';\n\nexport type GenderType = 'movie' | 'music' | 'docu' | 'tvshow';\n\nexport type ItemsParams = {\n  /**\n   * Тип видео контента\n   */\n  type?: ItemType;\n\n  /**\n   * Поиск по заголовку, минимум 3 символа. Выборка по типу LIKE ‘$ASD’\n   */\n  title?: string | null;\n\n  /**\n   * id жанра. Для множественного поиска список через запятую.\n   */\n  genre?: string | null;\n\n  /**\n   * id страны. Для множественного поиска список через запятую.\n   */\n  country?: string | null;\n\n  /**\n   * Год. Для поиска в промежутке year1-year2\n   */\n  year?: string | null;\n\n  /**\n   * Субититы\n   */\n  subtitles?: string | null;\n\n  /**\n   * Статус сериала, завершен/снимается\n   */\n  finished?: Bool;\n\n  /**\n   * Имена актеров чере запятую или +(плюс), “Actor1,Actor2+Actor3” - ищет (Actor1 OR (Actor2 AND Actor3))\n   */\n  actor?: string;\n\n  /**\n   * Имена режисеров чере запятую или +(плюс), “Actor1,Actor2+Actor3” - ищет (Actor1 OR (Actor2 AND Actor3))\n   */\n  director?: string;\n\n  /**\n   * Поиск по первой букве в названиях(рус, анг) фильма\n   */\n  letter?: string;\n\n  /**\n   * Массив простых условий для фильтра. Доступные поля как и в сортировке. year <= 100. Объединение условий через AND\n   */\n  conditions?: string[];\n\n  /**\n   * Массив для пропуска пользовательских настроек фильтрации\n   *\n   * * quality - Пропускаем проверку на сомнительное качество\n   * * advert - Пропускаем проверку на контент с рекламой\n   * * erotic - Пропускаем проверку на эротический контент\n   */\n  force?: ('quality' | 'advert' | 'erotic')[];\n\n  /**\n   * Сортировка, по умолчанию ‘updated-‘.\n   * Без знака ‘-‘ сортируется по возрастанию(ASC), со знаком ‘-‘(минус) по убыванию(DESC).\n   * Можно указать можество полей через запятую,.\n   *\n   * * id\n   * * year\n   * * title\n   * * created\n   * * updated\n   * * rating\n   * * views\n   * * watchers\n   */\n  sort?: string | null;\n\n  period?: string | null;\n\n  /**\n   * Массив идентификаторов качеств\n   */\n  quality?: string[];\n};\n\nexport type ItemsResponse = {\n  items: Item[];\n} & PaginationResponse;\n\nexport type ItemsSearchParams = {\n  /**\n   * Строка поиска\n   */\n  q: string;\n\n  /**\n   * Тип контента\n   */\n  type?: string;\n\n  /**\n   * Поиск только в одном из полей title, director, cast. Если не указанно, поиск по всем полям\n   */\n  field?: string;\n\n  /**\n   * Разбивает запрос по секциям type. По умолчанию 0\n   */\n  sectioned?: Bool;\n};\n\nexport type ItemsWithPagination = {\n  items: Item[];\n  pagination: Pagination;\n};\n\nexport type ItemsSearchResponse<Sectioned extends Bool | undefined> = (Sectioned extends Bool.True\n  ? {\n      items: {\n        [key: string]: ItemsWithPagination;\n      };\n    }\n  : ItemsWithPagination) &\n  Response;\n\nexport type ItemMediaResponse = {\n  item: ItemDetails;\n} & Response;\n\nexport type ItemMediaLinksResponse = {\n  files: File[];\n  subtitles: Subtitle[];\n};\n\nexport type ItemVoteResponse = {\n  /**\n   * Засчитался ли голос\n   */\n  voted: boolean;\n\n  /**\n   * Всего голосов\n   */\n  total: number;\n\n  /**\n   * Позитивных голосов\n   */\n  positive: number;\n\n  /**\n   * Негативных голосов\n   */\n  negative: number;\n\n  /**\n   * Подсчитанный рейтинг: позитивные минус негативные\n   */\n  rating: number;\n};\n\nexport type ItemCommentsResponse = {\n  item: {\n    id: string;\n    title: string;\n  };\n  comments: Comment[];\n} & Response;\n\nexport type ItemTrailerResponse = {\n  trailer: Trailer;\n} & Response;\n\nexport type ChannelsResponse = {\n  channels: Channel[];\n} & Response;\n\nexport type BookmarksResponse = {\n  items: Bookmark[];\n} & Response;\n\nexport type BookmarkItemsResponse = {\n  folder: Bookmark;\n  items: Item[];\n} & PaginationResponse;\n\nexport type ItemBookmarksResponse = {\n  folders: Bookmark[];\n} & Response;\n\nexport type BookmarkCreateResponse = {\n  folder: Bookmark;\n} & Response;\n\nexport type WatchingItemResponse = {\n  item: {\n    id: string;\n    title: string;\n    type: string;\n\n    /**\n     * В зависимости от типа контента данная часть может меняться\n     * Для сериалов\n     */\n    seasons: Season[];\n\n    /**\n     * Для фильмов, многосерийных фильмов и тд\n     */\n    videos: Video[];\n  };\n} & Response;\n\nexport type WatchingItemsResponse = {\n  items: Item[];\n};\n\nexport type WatchingToggleResponse = {\n  /**\n   * 0 - отмечено как непросмотренные, 1 - отмечено как просмотренные\n   */\n  watched: Bool;\n} & Response;\n\nexport type WatchingToggleWatchlistResponse = {\n  /**\n   * false - отмечено как непросмотренные, true - отмечено как просмотренные\n   */\n  watching: boolean;\n} & Response;\n\nexport type CollectionsResponse = {\n  items: Collection[];\n} & PaginationResponse;\n\nexport type CollectionItemsResponse = {\n  collection: Collection;\n  items: Item[];\n};\n\nexport type HistoryResponse = {\n  history: HistoryItem[];\n} & PaginationResponse;\n","import BaseApiClient from './base';\nimport {\n  BookmarkCreateResponse,\n  BookmarkItemsResponse,\n  BookmarksResponse,\n  Bool,\n  ChannelsResponse,\n  CollectionItemsResponse,\n  CollectionsResponse,\n  CountriesResponse,\n  DeviceCodeResponse,\n  DeviceInfo,\n  DeviceInfoResponse,\n  DeviceRemoveResponse,\n  DeviceSettingsParams,\n  DeviceSettingsResponse,\n  DevicesResponse,\n  GendersResponse,\n  HistoryResponse,\n  ItemBookmarksResponse,\n  ItemMediaLinksResponse,\n  ItemMediaResponse,\n  ItemTrailerResponse,\n  ItemVoteResponse,\n  ItemsParams,\n  ItemsResponse,\n  ItemsSearchParams,\n  ItemsSearchResponse,\n  OnConfirm,\n  ServerLocationsReponse,\n  StreamingTypesReponse,\n  SubtitlesResponse,\n  TokensResponse,\n  TypesResponse,\n  UserReponse,\n  VideoQualitiesResponse,\n  VoiceoverAuthorsResponse,\n  VoiceoverTypesResponse,\n  WatchingItemResponse,\n  WatchingItemsResponse,\n  WatchingToggleResponse,\n  WatchingToggleWatchlistResponse,\n} from './typings';\n\nconst KINOPUB_API_BASE_URL = process.env.KINOPUB_API_BASE_URL || 'https://api.service-kp.com';\nconst KINOPUB_API_CLIENT_ID = process.env.KINOPUB_API_CLIENT_ID || 'xbmc';\nconst KINOPUB_API_CLIENT_SECRET = process.env.KINOPUB_API_CLIENT_SECRET || 'cgg3gtifu46urtfp2zp1nqtba0k2ezxh';\n\nclass KinopubApiClient extends BaseApiClient {\n  private clientId: string;\n\n  private clientSecret: string;\n\n  private accessTokenCheckIntervaId!: NodeJS.Timeout | null;\n\n  constructor(\n    clientId: string = KINOPUB_API_CLIENT_ID,\n    clientSecret: string = KINOPUB_API_CLIENT_SECRET,\n    baseUrl: string = KINOPUB_API_BASE_URL,\n  ) {\n    super(baseUrl);\n\n    this.clientId = clientId;\n    this.clientSecret = clientSecret;\n  }\n\n  clearTimers() {\n    clearInterval(this.accessTokenCheckIntervaId!);\n\n    this.accessTokenCheckIntervaId = null;\n  }\n\n  private async processTokensReponse(response: TokensResponse, deviceInfo: DeviceInfo, onSuccess?: Function) {\n    await this.clearTokens();\n\n    switch (response.error) {\n      case 'authorization_pending':\n        break;\n\n      case undefined:\n        this.clearTimers();\n\n        await this.saveTokens(response);\n        await this.deviceNotify(deviceInfo);\n        onSuccess?.();\n        return;\n\n      default:\n        this.clearTimers();\n        throw response.error;\n    }\n  }\n\n  private async requestUserCode(deviceInfo: DeviceInfo, onConfirm?: OnConfirm) {\n    this.clearTokens();\n\n    const { interval, code, user_code, verification_uri } = await this.requestDeviceCode();\n\n    if (user_code) {\n      await onConfirm?.(user_code, verification_uri);\n    } else {\n      throw new Error(`Did't received user_code`);\n    }\n\n    return new Promise<void>((resolve, reject) => {\n      this.clearTimers();\n      this.accessTokenCheckIntervaId = setInterval(async () => {\n        const response = await this.requestTokens(code);\n\n        try {\n          await this.processTokensReponse(response, deviceInfo, resolve);\n        } catch (ex) {\n          reject(ex);\n        }\n      }, (interval || 10) * 1000);\n    });\n  }\n\n  /**\n   * Получение access_token и refresh_token\n   * @param code Код для получения access_token и refresh_token\n   */\n  async requestTokens(code: string) {\n    const response = await this.post<TokensResponse>(`/oauth2/device`, null, {\n      grant_type: 'device_token',\n      client_id: this.clientId,\n      client_secret: this.clientSecret,\n      code,\n    });\n\n    return response;\n  }\n\n  /**\n   * Обновление access_token и refresh_token\n   * @param refresh_token Код для обновления access_token и refresh_token\n   */\n  async refreshTokens(refresh_token: string) {\n    const response = await this.post<TokensResponse>(`/oauth2/token`, null, {\n      grant_type: 'refresh_token',\n      client_id: this.clientId,\n      client_secret: this.clientSecret,\n      refresh_token,\n    });\n\n    return response;\n  }\n\n  /**\n   * Получение device_code\n   */\n  async requestDeviceCode() {\n    const response = await this.post<DeviceCodeResponse>(`/oauth2/device`, null, {\n      grant_type: 'device_code',\n      client_id: this.clientId,\n      client_secret: this.clientSecret,\n    });\n\n    return response;\n  }\n\n  /**\n   * Авторизация устройства\n   */\n  async deviceAuthorization(deviceInfo: DeviceInfo, onConfirm?: OnConfirm): Promise<void> {\n    this.clearTimers();\n\n    const refreshToken = this.getRefreshToken();\n\n    if (refreshToken) {\n      const response = await this.refreshTokens(refreshToken);\n\n      return this.processTokensReponse(response, deviceInfo);\n    } else {\n      try {\n        return await this.requestUserCode(deviceInfo, onConfirm);\n      } catch (ex) {\n        return this.deviceAuthorization(deviceInfo, onConfirm);\n      }\n    }\n  }\n\n  /**\n   * Отключение устройства\n   */\n  deactivate() {\n    this.deviceUnlink();\n\n    this.clearTokens();\n    this.clearTimers();\n  }\n\n  /**\n   * Информация о пользователе\n   */\n  user() {\n    return this.get<UserReponse>(`/v1/user`);\n  }\n\n  /**\n   * Список локаций сервера\n   */\n  serverLocations() {\n    return this.get<ServerLocationsReponse>(`/v1/references/server-location`);\n  }\n\n  /**\n   * Список типов стриминга\n   */\n  streamingTypes() {\n    return this.get<StreamingTypesReponse>(`/v1/references/streaming-type`);\n  }\n\n  /**\n   * Список типов переводов\n   */\n  voiceoverTypes() {\n    return this.get<VoiceoverTypesResponse>(`/v1/references/voiceover-type`);\n  }\n\n  /**\n   * Список авторов озвучек/переводов\n   */\n  voiceoverAuthors() {\n    return this.get<VoiceoverAuthorsResponse>(`/v1/references/voiceover-author`);\n  }\n\n  /**\n   * Список качеств видео\n   */\n  videoQualities() {\n    return this.get<VideoQualitiesResponse>(`/v1/references/video-quality`);\n  }\n\n  /**\n   * Список устройств на аккаунте\n   */\n  devices() {\n    return this.get<DevicesResponse>(`/v1/device`);\n  }\n\n  /**\n   * Информация о текущем устройстве\n   */\n  deviceInfo() {\n    return this.get<DeviceInfoResponse>(`/v1/device/info`);\n  }\n\n  /**\n   * Информация о устройстве\n   * @param id Идентификатор устройства\n   */\n  deviceInfoById(id: string) {\n    return this.get<DeviceInfoResponse>(`/v1/device/${id}`);\n  }\n\n  /**\n   * Удаление текущего устройства\n   */\n  deviceUnlink() {\n    return this.post<Response>(`/v1/device/unlink`);\n  }\n\n  /**\n   * Удаление устройства\n   * @param id Идентификатор устройства\n   */\n  deviceRemoveById(id: string) {\n    return this.post<DeviceRemoveResponse>(`/v1/device/${id}/remove`);\n  }\n\n  /**\n   * Изменение информации о текущем устройстве\n   * @param deviceInfo Информация о текущем устройстве\n   */\n  deviceNotify(deviceInfo: DeviceInfo) {\n    return this.post<Response>(`/v1/device/notify`, deviceInfo);\n  }\n\n  /**\n   * Получение настроек устройства\n   * @description На данный момент все настройки разбиваются на тип “чекбокс” и “список”. “Чекбокс” это настройки вида да/нет (1/0).\n   * Если не указан type, значит настройка трактуется как “чекбокс”.\n   * Если указан type: ‘list’, значит надо обрабатывать как список, формат\n   *\n   * Набор полей в списках всегда одинаков - id, label, description, selected\n   *\n   * Доступные настройки:\n   * * supportSsl boolean - Поддерживает ли устройство SSL\n   * * supportHevc boolean - Поддерживает ли устройство HEVC\n   * * supportHdr boolean - Поддерживает ли устройство HDR (10bit color)\n   * * support4k boolean - Поддерживает ли устройство UHD/4K\n   * * mixedPlaylist boolean - На данный момент только для HLS4, плейлист строится из всех доступных файлов AVC+HEVC.\n   * * streamingType integer - Идентификатор типа стриминга\n   * * serverLocation integer - Идентификатор региона, откуда получать контент\n   */\n  deviceSettings(id: string) {\n    return this.get<DeviceSettingsResponse>(`/v1/device/${id}/settings`);\n  }\n\n  /**\n   * Изменение настроек устройства\n   */\n  saveDeviceSettings(id: string, settings: DeviceSettingsParams) {\n    return this.post<Response>(`/v1/device/${id}/settings`, settings);\n  }\n\n  /**\n   * Типы контента\n   * @description Видео контент условно разделен на типы:\n   * * movie - Фильмы\n   * * serial - Сериалы\n   * * 3D - 3D Фильмы\n   * * concert - Концерты\n   * * documovie - Документальные фильмы\n   * * docuserial - Документальные сериалы\n   * * tvshow - ТВ Шоу\n   */\n  types() {\n    return this.get<TypesResponse>(`/v1/types`);\n  }\n\n  /**\n   * Типы жанров\n   * @description Жанры, как и контент, разделены по типам.\n   * Видео контент с типом movie, serial, 3d может принадлежать только жанрам с типом movie и т.д.\n   * * movie - жанры типов видео контента movie, serial, 3D (Фильмов и Сериалов)\n   * * music - жанры типов видео контента concert (Концерты)\n   * * docu - жанры типов видео контента documovie, docuserial (Документальные фильмы и сериалы)\n   */\n  genders() {\n    return this.get<GendersResponse>(`/v1/genres`);\n  }\n\n  /**\n   * Спиоск стран\n   */\n  countries() {\n    return this.get<CountriesResponse>(`/v1/countries`);\n  }\n\n  /**\n   * Спиоск субтитров\n   */\n  subtitles() {\n    return this.get<SubtitlesResponse>(`/v1/subtitles`);\n  }\n\n  /**\n   * Видео контент\n   */\n  items(params: ItemsParams, page?: number, perpage?: number) {\n    return this.get<ItemsResponse>(`/v1/items`, {\n      ...params,\n      page,\n      perpage,\n    });\n  }\n\n  /**\n   * Поиск\n   * @description Поиск производится по полям title, director, cast\n   */\n  itemsSearch(params: ItemsSearchParams, page?: number, perpage?: number) {\n    return this.get<ItemsSearchResponse<typeof params['sectioned']>>(`/v1/items/search`, {\n      ...params,\n      page,\n      perpage,\n    });\n  }\n\n  /**\n   * Похожие видео\n   * @param id Идентификатор item для которого проивзодится поиск похожих\n   */\n  itemSmiliar(id: string) {\n    return this.get<ItemsResponse>(`/v1/items/similar`, { id });\n  }\n\n  /**\n   * Список медиа-контента\n   * @param id Идентификатор item для которого запрашивается медиа-контент\n   * @param nolinks 1 исключает ссылки на видео (значение по умолчания - 0).\n   * У больших сериалов ссылки занимают львиную долю объема ответа причем большинство из этих ссылок не используется в рамках 1 запроса.\n   * В следующей версии значение по умолчанию станет 1, а через версию параметр станет недоступным и ссылки нужно будет всегда получать в отдельном запросе.\n   */\n  itemMedia(id: string, nolinks: Bool = Bool.True) {\n    return this.get<ItemMediaResponse>(`/v1/items/${id}`, { nolinks });\n  }\n\n  /**\n   * Ссылки на субтитры и видео-файлы для media\n   * @param id Идентификатор media\n   */\n  itemMediaLinks(id: string) {\n    return this.get<ItemMediaLinksResponse>(`/v1/items/media-links`, { mid: id });\n  }\n\n  /**\n   * Ссылка на видео-файл по имени файла\n   * @param file Путь к файлуv\n   * @param type Тип потока, http | hls | hls2 | hls4\n   */\n  itemMediaFileLink(file: string, type: string) {\n    return this.get<{ url: string }>(`/v1/items/media-video-link`, { file, type });\n  }\n\n  /**\n   * Голосование за видео\n   * @param id Идентификатор item\n   * @param like 1: нравится, 0: не нравится\n   */\n  itemVote(id: string, like: Bool) {\n    return this.get<ItemVoteResponse>(`/v1/items/vote`, { id, like });\n  }\n\n  /**\n   * Трейлер к контенту\n   */\n  itemTrailer(id?: string, sid?: string) {\n    return this.get<ItemTrailerResponse>(`/v1/items/trailer`, { id, sid });\n  }\n\n  /**\n   * Свежие видео\n   * @param type Тип видео контента\n   * @param page Текущая страница\n   * @param perpage Количество на страницу\n   */\n  itemsFresh(type: string, page?: number, perpage?: number) {\n    return this.get<ItemsResponse>(`/v1/items/fresh`, { type, page, perpage });\n  }\n\n  /**\n   * Горячие видео\n   * @param type Тип видео контента\n   * @param page Текущая страница\n   * @param perpage Количество на страницу\n   */\n  itemsHot(type: string, page?: number, perpage?: number) {\n    return this.get<ItemsResponse>(`/v1/items/hot`, { type, page, perpage });\n  }\n\n  /**\n   * Популярные видео\n   * @param type Тип видео контента\n   * @param page Текущая страница\n   * @param perpage Количество на страницу\n   */\n  itemsPopular(type: string, page?: number, perpage?: number) {\n    return this.get<ItemsResponse>(`/v1/items/popular`, { type, page, perpage });\n  }\n\n  /**\n   * Список транслируемых каналов\n   * @description Транслируемые, на данный момент, каналы. Обычно это какие-то события типа Евро 2016, Рио 2016.\n   */\n  channels() {\n    return this.get<ChannelsResponse>(`/v1/tv`);\n  }\n\n  /**\n   * Список папок в закладках\n   */\n  bookmarks() {\n    return this.get<BookmarksResponse>(`/v1/bookmarks`);\n  }\n\n  /**\n   * Список фильмов/сериалов в папке\n   * @param id Идентификатор закладки\n   * @param page Текущая страница\n   * @param perpage Количество на страницу\n   */\n  bookmarkItems(id: string, page?: number, perpage?: number) {\n    return this.get<BookmarkItemsResponse>(`/v1/bookmarks/${id}`, { page, perpage });\n  }\n\n  /**\n   * Список папок в которых присутствует фильм\n   * @param id Идентификатор item\n   */\n  itemBookmarks(id: string) {\n    return this.get<ItemBookmarksResponse>(`/v1/bookmarks/get-item-folders`, { item: id });\n  }\n\n  /**\n   * Создать папку\n   * @param title Название папки\n   */\n  bookmarkCreate(title: string) {\n    return this.post<BookmarkCreateResponse>(`/v1/bookmarks/create`, { title });\n  }\n\n  /**\n   * Удаление папки\n   * @param folder Идентификатор папки\n   */\n  bookmarkRemove(folder: string) {\n    return this.post<Response>(`/v1/bookmarks/remove-folder`, { folder });\n  }\n\n  /**\n   * Добавление фильма в папку\n   * @param item Идентификатор фильма\n   * @param folder Идентификатор папки\n   */\n  bookmarkAddItem(item: string, folder: string) {\n    return this.post<Response>(`/v1/bookmarks/add`, { item, folder });\n  }\n\n  /**\n   * Удаление фильма из папки/папок\n   * @param item Идентификатор фильма\n   * @param folder Идентификатор папки, если отсутствует - удаляем из всех папок\n   */\n  bookmarkRemoveItem(item: string, folder?: string) {\n    return this.post<Response>(`/v1/bookmarks/remove-item`, { item, folder });\n  }\n\n  /**\n   * Переключение добвить/удалить фильм\n   * @param item Идентификатор фильма\n   * @param folder Идентификатор папки\n   */\n  bookmarkToggleItem(item: string, folder: string) {\n    return this.post<Response>(`/v1/bookmarks/toggle-item`, { item, folder });\n  }\n\n  /**\n   * Информация по просмотрам видео\n   * @param id Идентификатор фильма/сериала/и тд\n   * @param video Номер видео, начинается с 1. Если отсутсвует выводятся все видео.\n   * @param season Номер сезона, присутсвует только у сериалов, начинается с 1. Если отсутсвует, выводятся все сезоны.\n   */\n  watchingItem(id: string, video?: number, season?: number) {\n    return this.get<WatchingItemResponse>(`/v1/watching`, { id, video, season });\n  }\n\n  /**\n   * Недосмотренные фильмы/концерты/документальные фильмы/3Д¶\n   */\n  watchingMovies() {\n    return this.get<WatchingItemsResponse>(`/v1/watching/movies`);\n  }\n\n  /**\n   * Список сериалов с новыми/не досмотренными сериями\n   * @param subscribed 0 - Показывать все недосмотренные сериалы, 1 - Показывать сериалы отмеченные “Буду смотреть”\n   */\n  watchingSerials(subscribed?: Bool) {\n    return this.get<WatchingItemsResponse>(`/v1/watching/serials`, { subscribed });\n  }\n\n  /**\n   * Добавление метки о просмотре\n   * @param id Идентификатор фильма/сериала/и тд\n   * @param time Время в секундах, где остановился просмотр\n   * @param video Номер видео, начинается с 1. Если отсутсвует выводятся все видео.\n   * @param season Номер сезона, присутсвует только у сериалов, начинается с 1. Если отсутсвует для сезона, выдаст исключение 404 Not Found.\n   */\n  watchingMarkTime(id: string, time: number, video: number, season?: number) {\n    return this.get<Response>(`/v1/watching/marktime`, { id, time, video, season });\n  }\n\n  /**\n   * Изменение просмотрено/не просмотрено\n   * @param id Идентификатор фильма/сериала/и тд\n   * @param video Номер видео/эпизода, начинается с 1. Если отсутствует, модификации подвергаются все эпизоды сезона\n   * @param season Номер сезона, присутствует только у сериалов, начинается с 1.\n   * @param status 1 отметить как просмотрено, 0 отметить как не просмотрено\n   */\n  watchingToggle(id: string, video?: number, season?: number, status?: Bool) {\n    return this.get<WatchingToggleResponse>(`/v1/watching/toggle`, { id, video, season, status });\n  }\n\n  /**\n   * Добавление сериала в список “Буду смотреть”\n   * @param id Идентификатор фильма/сериала/и тд\n   */\n  watchingToggleWatchlist(id: string) {\n    return this.get<WatchingToggleWatchlistResponse>(`/v1/watching/togglewatchlist`, { id });\n  }\n\n  /**\n   * Список подборок\n   * @param title Поиск по заголовку, минимум 3 символа. Выборка по типу LIKE ‘$ASD’\n   * @param sort Сортировка, по умолчанию ‘updated-‘. Без знака ‘-‘ сортируется по возрастанию(ASC)\n   * * id\n   * * title\n   * * views\n   * * watchers\n   * * created\n   * * updated\n   * @param page Пагинация, текущая страница\n   * @param perpage Пагинация, кол-во на одной странице\n   * @returns\n   */\n  collections(title?: string, sort?: string, page?: number, perpage?: number) {\n    return this.get<CollectionsResponse>(`/v1/collections`, { title, sort, page, perpage });\n  }\n\n  /**\n   * Список фильмов в подбороке\n   * @param id Идентификатор подборки\n   */\n  collectionItems(id: string) {\n    return this.get<CollectionItemsResponse>(`/v1/collections/view`, { id });\n  }\n\n  /**\n   * Получение истории просмотров\n   * @param page Номер страницы\n   * @param perpage Кол-во на страницы, по умолчанию 20, максимум 50\n   */\n  history(page?: number, perpage?: number) {\n    return this.get<HistoryResponse>(`/v1/history`, { page, perpage });\n  }\n\n  /**\n   * Очистить просмотр для media\n   * @param id Идентификатор media\n   */\n  historyClearMedia(id: string) {\n    return this.post<Response>(`/v1/history/clear-for-media`, null, { id });\n  }\n\n  /**\n   * Очистить просмотр для season\n   * @param id Идентификатор season\n   */\n  historyClearSeason(id: string) {\n    return this.post<Response>(`/v1/history/clear-for-season`, null, { id });\n  }\n\n  /**\n   * Очистить просмотр для item\n   * @param id Идентификатор item\n   */\n  historyClearItem(id: string) {\n    return this.post<Response>(`/v1/history/clear-for-item`, null, { id });\n  }\n}\n\nexport default KinopubApiClient;\n","import Cookies from 'js-cookie';\n\nimport storage from 'storage';\n\nimport KinopubApiClient from './kinopub';\n\nclass ApiClient extends KinopubApiClient {\n  constructor() {\n    super(\n      process.env.REACT_APP_KINOPUB_API_CLIENT_ID,\n      process.env.REACT_APP_KINOPUB_API_CLIENT_SECRET,\n      process.env.REACT_APP_KINOPUB_API_BASE_URL,\n    );\n  }\n\n  isLogged() {\n    return storage.getItem<boolean>('is_logged');\n  }\n\n  protected getAccessToken() {\n    return Cookies.get('access_token') || storage.getItem<string>('access_token');\n  }\n\n  protected getRefreshToken() {\n    return Cookies.get('refresh_token') || storage.getItem<string>('refresh_token');\n  }\n\n  protected saveTokens({ access_token, refresh_token, expires_in }: { access_token: string; refresh_token: string; expires_in: number }) {\n    storage.setItem('is_logged', true, 30 * 24 * 3600);\n    storage.setItem('access_token', access_token, expires_in);\n    storage.setItem('refresh_token', refresh_token, 30 * 24 * 3600);\n\n    Cookies.set('access_token', access_token, { expires: expires_in / (24 * 3600) });\n    Cookies.set('refresh_token', refresh_token, { expires: 30 });\n  }\n\n  protected clearTokens() {\n    (['access_token', 'refresh_token'] as const).forEach((key) => Cookies.remove(key));\n    (['access_token', 'refresh_token', 'is_logged'] as const).forEach((key) => storage.removeItem(key));\n  }\n}\n\nexport default ApiClient;\n","import cx from 'classnames';\n\nexport type TextProps = {\n  as?: string | React.ElementType;\n  className?: string;\n} & React.HTMLAttributes<HTMLParagraphElement>;\n\nconst Text: React.FC<TextProps> = ({ className, as: As = 'p', ...props }) => {\n  return <As {...props} className={cx('text-gray-200', className)} />;\n};\n\nexport default Text;\n","import cx from 'classnames';\n\nimport './styles.css';\n\nconst ICONS_MAP = {\n  notifications_active: <>&#xe7f7;</>,\n  new_releases: <>&#xe031;</>,\n  library_music: <>&#xe030;</>,\n  live_tv: <>&#xe639;</>,\n  play_arrow: <>&#xe037;</>,\n  play_circle_outline: <>&#xe039;</>,\n  sports_soccer: <>&#xea2f;</>,\n  expand_more: <>&#xe5cf;</>,\n  expand_less: <>&#xe5ce;</>,\n  emoji_emotions: <>&#xea22;</>,\n  auto_awesome: <>&#xe65f;</>,\n  visibility_off: <>&#xe8f5;</>,\n  closed_caption: <>&#xe01c;</>,\n  thumb_up: <>&#xe8dc;</>,\n  graphic_eq: <>&#xe1b8;</>,\n  filter_list: <>&#xe152;</>,\n  arrow_back: <>&#xe5c4;</>,\n} as const;\n\nexport type IconName = keyof typeof ICONS_MAP;\n\ntype Props = {\n  name: IconName | string;\n} & React.HTMLAttributes<HTMLSpanElement>;\n\nconst Icon: React.FC<Props> = ({ name, className, ...props }) => {\n  return (\n    <i {...props} className={cx(`material-icons text-center`, className)}>\n      {ICONS_MAP[name as IconName] || name}\n    </i>\n  );\n};\n\nexport default Icon;\n","import { useEffect } from 'react';\n\nimport { ButtonClickHandler, KeyboardCodesKeys, registerButtonHandler } from 'utils/keyboard';\n\nexport type { ButtonClickHandler, KeyboardCodesKeys } from 'utils/keyboard';\n\nfunction useButtonEffect(key: KeyboardCodesKeys | KeyboardCodesKeys[], handler: ButtonClickHandler) {\n  useEffect(() => {\n    return registerButtonHandler(key, handler);\n  }, [key, handler]);\n}\n\nexport default useButtonEffect;\n","import Spottable from '@enact/spotlight/Spottable';\nimport Item from '@enact/ui/Item';\n\nexport default Spottable(Item);\n","import { useMemo } from 'react';\nimport { useMutation } from 'react-query';\n\nimport ApiClient from 'api';\n\nimport { Method, Methods } from './useApi';\n\nfunction useApiMutation<TMethod extends Method, TData = Methods[TMethod], TError = string, TVariables = Parameters<ApiClient[TMethod]>>(\n  method: TMethod,\n) {\n  const client = useMemo(() => new ApiClient(), []);\n\n  // @ts-expect-error\n  const mutation = useMutation<TData, TError, TVariables>([client, method], (params) => client[method](...params));\n\n  return Object.assign({}, mutation, {\n    [method]: mutation.mutate,\n    [`${method}Async`]: mutation.mutateAsync,\n  });\n}\n\nexport default useApiMutation;\n","import { useCallback, useEffect, useState } from 'react';\n\nimport storage, { Key, Value } from 'storage';\n\nfunction useStorageState<T extends Value = Value>(key: Key, defaultValue?: T) {\n  const [value, _setValue] = useState<T>(storage.getItem<T>(key) ?? (defaultValue as T));\n  const setValue = useCallback(\n    (newValue: Value, expire?: number) => {\n      storage.setItem(key, newValue, expire);\n    },\n    [key],\n  );\n\n  useEffect(() => {\n    const listener = () => {\n      _setValue(storage.getItem<T>(key) ?? (defaultValue as T));\n    };\n\n    const unsubscribe = storage.subscribe(listener);\n\n    listener();\n\n    return unsubscribe;\n  }, [key, defaultValue]);\n\n  return [value, setValue] as const;\n}\n\nexport default useStorageState;\n","import { useCallback } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport cx from 'classnames';\n\nimport Icon from 'components/icon';\nimport Spottable from 'components/spottable';\n\ntype Props = {\n  href?: string;\n  icon?: string;\n  iconOnly?: boolean;\n  replace?: boolean;\n  active?: boolean;\n  state?: any;\n  className?: string;\n  onClick?: () => void;\n};\n\nconst Link: React.FC<Props> = ({ href, state, children, icon, iconOnly = !children, replace, active, className, onClick, ...props }) => {\n  const history = useHistory();\n  const handleOnClick = useCallback(() => {\n    if (href) {\n      (replace ? history.replace : history.push)(href, state);\n    }\n    onClick?.();\n  }, [href, state, replace, onClick, history]);\n\n  return (\n    <Spottable\n      {...props}\n      className={cx(\n        'whitespace-nowrap rounded cursor-pointer px-2 py-1',\n        {\n          'text-gray-200': !active,\n          'text-red-600': active,\n        },\n        className,\n      )}\n      onClick={handleOnClick}\n      role=\"button\"\n    >\n      <div className=\"flex items-center \">\n        {icon && <Icon className={cx({ 'mr-2': !iconOnly })} name={icon} />}\n        {!iconOnly && children}\n      </div>\n    </Spottable>\n  );\n};\n\nexport default Link;\n","import castArray from 'lodash/castArray';\n\nexport const KeyboardCodes = {\n  Enter: [13, 16777221],\n  Play: [71, 415],\n  Pause: [19, 74, 413],\n  PlayPause: [32, 179, 10252],\n  Back: [461, 10009],\n  Backspace: 8,\n  Escape: 27,\n  ArrowLeft: 37,\n  ArrowUp: 38,\n  ArrowRight: 39,\n  ArrowDown: 40,\n  Red: 403,\n  Green: 404,\n  Yellow: 405,\n  Blue: 406,\n  Settings: 10133,\n} as const;\n\nexport type KeyboardCodesKeys = keyof typeof KeyboardCodes;\n\nexport function isKey(e: KeyboardEvent | React.KeyboardEvent, key: KeyboardCodesKeys | KeyboardCodesKeys[]) {\n  const keys = castArray(key);\n  const keyCode = e.keyCode || e.which;\n\n  return keys.some((key) => e.key === key || castArray(KeyboardCodes[key]).some((code) => keyCode === code));\n}\n\nexport function isBackButton(e: KeyboardEvent): boolean {\n  return isKey(e, ['Back', 'Backspace', 'Escape']);\n}\n\nexport type ButtonClickHandler = (e: KeyboardEvent) => void | boolean | Promise<void> | Promise<boolean>;\n\nlet BUTTON_HANDLERS: {\n  key: KeyboardCodesKeys | KeyboardCodesKeys[];\n  handler: ButtonClickHandler;\n}[];\n\nfunction listenButton() {\n  window.addEventListener('keydown', async (e: KeyboardEvent) => {\n    let isBack = false;\n    if (isBackButton(e)) {\n      isBack = true;\n      e.preventDefault();\n      e.stopPropagation();\n    }\n\n    for (let { key, handler } of BUTTON_HANDLERS) {\n      if ((key === 'Back' && isBack) || isKey(e, key)) {\n        const result = await handler(e);\n\n        if (result === false) {\n          e.preventDefault();\n          e.stopPropagation();\n          break;\n        }\n      }\n    }\n  });\n}\n\nexport function registerButtonHandler(key: KeyboardCodesKeys | KeyboardCodesKeys[], handler: ButtonClickHandler) {\n  if (!BUTTON_HANDLERS) {\n    BUTTON_HANDLERS = [];\n\n    listenButton();\n  }\n\n  BUTTON_HANDLERS = [{ key, handler }, ...BUTTON_HANDLERS];\n\n  return () => {\n    BUTTON_HANDLERS = BUTTON_HANDLERS.filter((h) => h.handler !== handler);\n  };\n}\n\nexport function triggerButtonClick(key: KeyboardCodesKeys) {\n  const [keyCode] = castArray(KeyboardCodes[key]);\n\n  window.dispatchEvent(\n    new KeyboardEvent('keydown', {\n      key,\n      keyCode,\n    }),\n  );\n}\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 331;","import { useEffect, useMemo, useState } from 'react';\nimport { detect } from '@enact/core/platform';\nimport { deviceinfo } from '@enact/webos/deviceinfo';\n\nimport { APP_INFO, APP_TITLE } from 'utils/app';\n\nfunction useDeviceInfo() {\n  const [software, setSoftware] = useState('');\n  const [hardware, setHardware] = useState('');\n\n  useEffect(() => {\n    const platform = detect();\n\n    setHardware(navigator.platform);\n    setSoftware(`${platform.platformName} (${APP_INFO})`);\n\n    deviceinfo(\n      // @ts-expect-error\n      (device: { modelName: string; sdkVersion: string; version: string }) => {\n        setHardware(`${device.modelName}${device.version ? ` (${device.version})` : ''}`);\n        setSoftware(\n          `${platform.platformName} ${\n            device.sdkVersion ||\n            // @ts-expect-error\n            platform[platform.platformName]\n          } (${APP_INFO})`,\n        );\n      },\n    );\n  }, []);\n\n  const deviceInfo = useMemo(\n    () => ({\n      software,\n      hardware,\n      title: APP_TITLE,\n    }),\n    [software, hardware],\n  );\n\n  return deviceInfo;\n}\n\nexport default useDeviceInfo;\n","export type Value = object | string | number | boolean | null;\n\nexport type Key =\n  | 'is_logged'\n  | 'access_token'\n  | 'refresh_token'\n  | 'streaming_type'\n  | 'is_hls.js_active'\n  | 'is_ac3_by_default_active'\n  | 'is_forced_by_default_active'\n  | 'is_pause_by_ok_click_active'\n  | `item_${string}_saved_audio_name`\n  | `item_${string}_saved_source_name`\n  | `item_${string}_saved_subtitle_name`;\n\nfunction getItem(storage: Storage, prefix: string, key: string) {\n  const data = JSON.parse(storage.getItem(prefix) || '{}') || {};\n\n  const { value, expire } = data[key] || {};\n\n  if (expire && Date.now() > expire) {\n    return null;\n  }\n\n  return value;\n}\n\nfunction setItem(storage: Storage, prefix: string, key: string, value?: Value, expire?: number) {\n  const data = JSON.parse(storage.getItem(prefix) || '{}') || {};\n\n  storage.setItem(\n    prefix,\n    JSON.stringify({\n      ...data,\n      [key]:\n        typeof value !== 'undefined'\n          ? {\n              value,\n              expire: typeof expire === 'number' ? Date.now() + expire * 1000 : undefined,\n            }\n          : undefined,\n    }),\n  );\n}\n\nfunction removeItem(storage: Storage, prefix: string, key: string) {\n  return setItem(storage, prefix, key);\n}\n\nexport class MyStorage<TKeys extends string = string> {\n  private prefix: string;\n  private listeners: (() => void)[];\n  private storage: Storage;\n\n  constructor(prefix: string, storage: Storage = window.localStorage) {\n    this.prefix = prefix;\n    this.listeners = [];\n    this.storage = storage;\n  }\n\n  private emit() {\n    requestAnimationFrame(() => {\n      this.listeners.forEach((listener) => listener());\n    });\n  }\n\n  subscribe = (listener: () => void) => {\n    this.listeners = [...this.listeners, listener];\n\n    return () => {\n      this.listeners = this.listeners.filter((l) => l !== listener);\n    };\n  };\n\n  getItem = <T extends Value>(key: TKeys): T => {\n    return getItem(this.storage, this.prefix, key);\n  };\n\n  setItem = <T extends Value>(key: TKeys, value: T, expire?: number) => {\n    const item = setItem(this.storage, this.prefix, key, value, expire);\n\n    this.emit();\n\n    return item;\n  };\n\n  removeItem = (key: TKeys) => {\n    removeItem(this.storage, this.prefix, key);\n\n    this.emit();\n  };\n}\n\nexport default new MyStorage<Key>('kinopub');\n\nexport const createSessionStorage = <Key extends string>(prefix: string = 'kinopub') => new MyStorage<Key>(prefix, window.sessionStorage);\n","import { ExtractRouteParams } from 'react-router';\nimport { generatePath as baseGeneratePath } from 'react-router-dom';\n\nexport const PATHS = {\n  Index: '/',\n  Home: '/home',\n  Search: '/search',\n  Watching: '/watching/:watchingType?',\n  Releases: '/releases/:releaseType?',\n  Category: '/category/:categoryType',\n  Genre: '/genres/:genreType',\n  Channels: '/channels',\n  Channel: '/channels/id:channelId',\n  Bookmarks: '/bookmarks',\n  Bookmark: '/bookmarks/id:bookmarkId',\n  Collections: '/collections/:collectionType?',\n  Collection: '/collections/id:collectionId',\n  History: '/history',\n  Item: '/item/id:itemId',\n  Video: '/video/id:itemId',\n  Trailer: '/trailer/id:trailerId',\n  Pair: '/pair',\n  Donate: '/donate',\n  Speed: '/speed',\n  Settings: '/settings',\n};\n\nexport type PathValuesType = typeof PATHS[keyof typeof PATHS];\n\nexport type RouteParams = {\n  channelId?: string;\n  collectionId?: string;\n  bookmarkId?: string;\n  itemId?: string;\n  trailerId?: string;\n  genreType?: string;\n  releaseType?: string;\n  categoryType?: string;\n  watchingType?: string;\n  collectionType?: string;\n};\n\nexport function generatePath<S extends PathValuesType>(\n  pattern: S,\n  params?: ExtractRouteParams<S> | null,\n  search?: Record<string, string> | string,\n) {\n  const query = search ? `?${new URLSearchParams(search)}` : '';\n\n  return baseGeneratePath(pattern, params ?? undefined) + query;\n}\n","import * as Sentry from '@sentry/browser';\nimport { Integrations as TracingIntegrations } from '@sentry/tracing';\n\nimport { APP_VERSION } from 'utils/app';\n\nSentry.init({\n  release: APP_VERSION,\n  dsn: 'https://d3a635962cb2440ca6754cdc6ff9af5b@o946544.ingest.sentry.io/5895550',\n  integrations: [new TracingIntegrations.BrowserTracing()],\n  tracesSampleRate: 1.0,\n});\n\nexport function logError(message: string) {\n  Sentry.captureMessage(message);\n}\n\nexport function logException(exception: any) {\n  Sentry.captureException(exception);\n}\n","export const IS_WEB = window.location.origin.startsWith('http');\n","import { BrowserRouter, BrowserRouterProps, MemoryRouter, MemoryRouterProps } from 'react-router-dom';\n\nimport { IS_WEB } from 'utils/enviroment';\n\nexport type RouterProps = BrowserRouterProps | MemoryRouterProps;\n\nconst Router: React.FC<RouterProps> = (props) => {\n  if (IS_WEB) {\n    return <BrowserRouter {...props} />;\n  }\n\n  return <MemoryRouter {...props} />;\n};\n\nexport default Router;\n","import React from 'react';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nconst FillLayout: React.FC<Props> = ({ children }) => {\n  return <div className=\"w-screen h-screen\">{children}</div>;\n};\n\nexport default FillLayout;\n","import { useLocation } from 'react-router-dom';\nimport cx from 'classnames';\nimport map from 'lodash/map';\n\nimport Link from 'components/link';\nimport { PATHS, generatePath } from 'routes';\n\ntype MenuItem = {\n  name: string;\n  icon: string;\n  href: string;\n};\n\nconst menuItems: (MenuItem | null)[][] = [\n  [\n    {\n      name: 'Главная',\n      icon: 'home',\n      href: PATHS.Home,\n    },\n    {\n      name: 'Поиск',\n      icon: 'search',\n      href: PATHS.Search,\n    },\n    {\n      name: 'Я смотрю',\n      icon: 'notifications_active',\n      href: generatePath(PATHS.Watching),\n    },\n    {\n      name: 'Закладки',\n      icon: 'bookmark',\n      href: PATHS.Bookmarks,\n    },\n    {\n      name: 'История',\n      icon: 'history',\n      href: PATHS.History,\n    },\n    {\n      name: 'Подборки',\n      icon: 'list',\n      href: generatePath(PATHS.Collections),\n    },\n  ].filter(Boolean),\n  [\n    {\n      name: 'Новинки',\n      icon: 'new_releases',\n      href: generatePath(PATHS.Releases),\n    },\n    {\n      name: 'Фильмы',\n      icon: 'movie',\n      href: generatePath(PATHS.Category, { categoryType: 'movie' }),\n    },\n    {\n      name: 'Сериалы',\n      icon: 'tv',\n      href: generatePath(PATHS.Category, { categoryType: 'serial' }),\n    },\n    {\n      name: 'Мультфильмы',\n      icon: 'toys',\n      href: generatePath(PATHS.Genre, { genreType: '23' }),\n    },\n    {\n      name: 'Аниме',\n      icon: 'auto_awesome',\n      href: generatePath(PATHS.Genre, { genreType: '25' }),\n    },\n    {\n      name: 'Концерты',\n      icon: 'library_music',\n      href: generatePath(PATHS.Category, { categoryType: 'concert' }),\n    },\n    {\n      name: 'Докуфильмы',\n      icon: 'archive',\n      href: generatePath(PATHS.Category, { categoryType: 'documovie' }),\n    },\n    {\n      name: 'Докусериалы',\n      icon: 'description',\n      href: generatePath(PATHS.Category, { categoryType: 'docuserial' }),\n    },\n    {\n      name: 'ТВ Шоу',\n      icon: 'live_tv',\n      href: generatePath(PATHS.Category, { categoryType: 'tvshow' }),\n    },\n    {\n      name: 'Спорт',\n      icon: 'sports_soccer',\n      href: generatePath(PATHS.Channels),\n    },\n  ].filter(Boolean),\n  [\n    process.env.REACT_APP_HIDE_DONATE_MENU === 'true'\n      ? null\n      : {\n          name: 'Донат',\n          icon: 'favorite',\n          href: PATHS.Donate,\n        },\n    {\n      name: 'Спидтест',\n      icon: 'speed',\n      href: PATHS.Speed,\n    },\n    {\n      name: 'Настройки',\n      icon: 'settings',\n      href: PATHS.Settings,\n    },\n  ].filter(Boolean),\n];\n\ntype Props = {\n  className?: string;\n};\n\nconst Menu: React.FC<Props> = ({ className, ...props }) => {\n  const location = useLocation();\n\n  return (\n    <nav className={cx('h-screen w-52 flex flex-col justify-between overflow-y-auto', className)} {...props}>\n      {map(menuItems, (list, idx) => (\n        <ul key={idx}>\n          {map(list, (item: MenuItem) => (\n            <li key={item.href}>\n              <Link href={item.href} icon={item.icon} active={location.pathname.startsWith(item.href)}>\n                {item.name}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      ))}\n    </nav>\n  );\n};\n\nexport default Menu;\n","import React from 'react';\n\nimport Menu from 'containers/menu';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nconst MainLayout: React.FC<Props> = ({ children, ...rest }) => {\n  return (\n    <div className=\"flex h-screen w-screen overflow-hidden\" {...rest}>\n      <Menu />\n      <div className=\"w-full px-2\">{children}</div>\n    </div>\n  );\n};\n\nexport default MainLayout;\n","import React, { Suspense, createElement, useMemo } from 'react';\nimport { Route, RouteComponentProps, RouteProps } from 'react-router-dom';\n\nimport Spinner from 'components/spinner';\nimport FillLayout from 'layouts/fill';\nimport MainLayout from 'layouts/main';\n\nexport type ViewProps = {\n  component: RouteProps['component'];\n  layout?: 'main' | 'fill';\n} & Omit<RouteProps, 'component' | 'render'>;\n\nconst View: React.FC<ViewProps> = ({ component, layout, ...props }) => {\n  const Layout = useMemo(() => {\n    if (layout === 'fill') {\n      return FillLayout;\n    }\n\n    return MainLayout;\n  }, [layout]);\n  const render = useMemo<React.FC<RouteComponentProps>>(\n    () => (routeProps) =>\n      (\n        <Layout>\n          <Suspense fallback={<Spinner />}>{createElement(component!, routeProps)}</Suspense>\n        </Layout>\n      ),\n    [component, Layout],\n  );\n\n  return <Route {...props} render={render} />;\n};\n\nexport default View;\n","import { useCallback, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport useApiMutation from 'hooks/useApiMutation';\nimport useDeviceInfo from 'hooks/useDeviceInfo';\nimport useStorageState from 'hooks/useStorageState';\nimport { PATHS, generatePath } from 'routes';\n\nimport { logException } from 'utils/logging';\n\nexport type AuthorizationStep = 'processing' | 'pair' | 'authorized';\n\nfunction useDeviceAuthorizationEffect(onAuthorization?: (authorizationStep: AuthorizationStep) => void) {\n  const history = useHistory();\n  const deviceInfo = useDeviceInfo();\n  const { deviceAuthorizationAsync } = useApiMutation('deviceAuthorization');\n  const [isAuthorized, setIsAuthorized] = useState(false);\n  const [isLogged] = useStorageState<boolean>('is_logged');\n\n  const handleOnConfirm = useCallback(\n    (userCode: string, verificationUri: string) =>\n      new Promise<void>((resolve) => {\n        requestAnimationFrame(() => {\n          history.replace(\n            generatePath(PATHS.Pair, null, {\n              userCode,\n              verificationUri,\n            }),\n          );\n          onAuthorization?.('pair');\n          resolve();\n        });\n      }),\n    [history, onAuthorization],\n  );\n\n  useEffect(() => {\n    if (!isLogged) {\n      setIsAuthorized(false);\n    }\n  }, [isLogged]);\n\n  useEffect(() => {\n    const timeoutId = setTimeout(async () => {\n      try {\n        if (!isAuthorized) {\n          onAuthorization?.('processing');\n          await deviceAuthorizationAsync([deviceInfo, handleOnConfirm]);\n          setIsAuthorized(true);\n        }\n        onAuthorization?.('authorized');\n      } catch (ex) {\n        logException(ex);\n      }\n    }, 500);\n\n    return () => {\n      clearTimeout(timeoutId);\n    };\n  }, [isLogged, isAuthorized, deviceInfo, onAuthorization, handleOnConfirm, deviceAuthorizationAsync]);\n}\n\nexport default useDeviceAuthorizationEffect;\n","import { useCallback, useEffect, useState } from 'react';\nimport { Switch, useHistory } from 'react-router-dom';\n\nimport Spinner from 'components/spinner';\nimport Text from 'components/text';\nimport useButtonEffect from 'hooks/useButtonEffect';\nimport useDeviceAuthorizationEffect, { AuthorizationStep } from 'hooks/useDeviceAuthorizationEffect';\nimport { PATHS } from 'routes';\n\nconst Views: React.FC = ({ children, ...props }) => {\n  const history = useHistory();\n  const [showNotice, setShowNotice] = useState(false);\n  const [showSpinner, setShowSpinner] = useState(true);\n  const [authorizationStep, setAuthorizationStep] = useState<AuthorizationStep>();\n\n  const handleBackButtonClick = useCallback(() => {\n    if (history.location.pathname !== PATHS.Home) {\n      history.goBack();\n    } else if (showNotice) {\n      window.close();\n    } else {\n      setShowNotice(true);\n\n      setTimeout(() => {\n        setShowNotice(false);\n      }, 5 * 1000);\n    }\n  }, [history, showNotice]);\n\n  const handleAuthorization = useCallback(\n    (authorizationStep: AuthorizationStep) => {\n      setAuthorizationStep(authorizationStep);\n\n      const path = history.location.pathname;\n      if (authorizationStep === 'authorized') {\n        if (path === PATHS.Pair || path === PATHS.Index) {\n          history.replace(PATHS.Home);\n        }\n      }\n    },\n    [history],\n  );\n\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      setShowSpinner(authorizationStep === 'processing');\n    }, 1000);\n\n    return () => {\n      clearTimeout(timeoutId);\n    };\n  }, [authorizationStep]);\n\n  useButtonEffect('Back', handleBackButtonClick);\n  useDeviceAuthorizationEffect(handleAuthorization);\n\n  if (showSpinner) {\n    return <Spinner />;\n  }\n\n  return (\n    <div {...props}>\n      {showNotice && (\n        <div className=\"fixed top-2 right-2 p-4 z-999 shadow-xl rounded-xl bg-gray-500 bg-opacity-70\">\n          <Text>\n            Чтобы закрыть приложение,\n            <br />\n            нажмите кнопку \"назад\" ещё раз\n          </Text>\n        </div>\n      )}\n      <Switch>{children}</Switch>\n    </div>\n  );\n};\n\nexport default Views;\n","import 'styles/global.css';\n\nimport React from 'react';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport MoonstoneDecorator from '@enact/moonstone/MoonstoneDecorator';\n\nimport Router from 'components/router';\nimport View from 'components/view';\nimport Views from 'containers/views';\nimport { PATHS } from 'routes';\n\nconst BookmarkView = React.lazy(() => import('views/booksmark'));\nconst BookmarksView = React.lazy(() => import('views/booksmarks'));\nconst CategoryView = React.lazy(() => import('views/category'));\nconst GenreView = React.lazy(() => import('views/genre'));\nconst ChannelView = React.lazy(() => import('views/channel'));\nconst ChannelsView = React.lazy(() => import('views/channels'));\nconst CollectionView = React.lazy(() => import('views/collection'));\nconst CollectionsView = React.lazy(() => import('views/collections'));\nconst HistoryView = React.lazy(() => import('views/history'));\nconst HomeView = React.lazy(() => import('views/home'));\nconst IndexView = React.lazy(() => import('views/index'));\nconst ItemView = React.lazy(() => import('views/item'));\nconst NotFoundView = React.lazy(() => import('views/notFound'));\nconst PairView = React.lazy(() => import('views/pair'));\nconst SearchView = React.lazy(() => import('views/search'));\nconst SettingsView = React.lazy(() => import('views/settings'));\nconst DonateView = React.lazy(() => import('views/donate'));\nconst SpeedView = React.lazy(() => import('views/speed'));\nconst TrailerView = React.lazy(() => import('views/trailer'));\nconst VideoView = React.lazy(() => import('views/video'));\nconst WatchingView = React.lazy(() => import('views/watching'));\nconst ReleasesView = React.lazy(() => import('views/releases'));\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      staleTime: 5 * 60 * 1000,\n    },\n  },\n});\n\ntype Props = {};\n\nconst App: React.FC<Props> = (props) => {\n  return (\n    <Router>\n      <QueryClientProvider client={queryClient}>\n        <Views {...props}>\n          <View path={PATHS.Index} component={IndexView} layout=\"fill\" exact />\n          <View path={PATHS.Home} component={HomeView} />\n          <View path={PATHS.Search} component={SearchView} />\n          <View path={PATHS.Category} component={CategoryView} />\n          <View path={PATHS.Genre} component={GenreView} />\n          <View path={PATHS.Watching} component={WatchingView} />\n          <View path={PATHS.Releases} component={ReleasesView} />\n          <View path={PATHS.Bookmark} component={BookmarkView} />\n          <View path={PATHS.Bookmarks} component={BookmarksView} />\n          <View path={PATHS.Collection} component={CollectionView} />\n          <View path={PATHS.Collections} component={CollectionsView} />\n          <View path={PATHS.Channel} component={ChannelView} layout=\"fill\" />\n          <View path={PATHS.Channels} component={ChannelsView} />\n          <View path={PATHS.History} component={HistoryView} />\n          <View path={PATHS.Item} component={ItemView} layout=\"fill\" />\n          <View path={PATHS.Video} component={VideoView} layout=\"fill\" />\n          <View path={PATHS.Trailer} component={TrailerView} layout=\"fill\" />\n          <View path={PATHS.Pair} component={PairView} layout=\"fill\" />\n          <View path={PATHS.Donate} component={DonateView} />\n          <View path={PATHS.Speed} component={SpeedView} />\n          <View path={PATHS.Settings} component={SettingsView} />\n          <View component={NotFoundView} />\n        </Views>\n      </QueryClientProvider>\n    </Router>\n  );\n};\n\nexport default MoonstoneDecorator(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service worker. To learn more, visit https://cra.link/PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log('New content is available and will be used when all tabs for this page are closed. See https://cra.link/PWA.');\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import './polyfills';\nimport './plugins';\n\nimport { render } from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nimport { sendWebVitalsToGoogleAnalytics } from 'utils/analytics';\n\nconst app = <App />;\n\n// In a browser environment, render instead of exporting\nif (typeof window !== 'undefined') {\n  render(app, document.getElementById('root'));\n}\n\nexport default app;\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register({\n  onUpdate: () => {\n    if (window.confirm?.('Достуна новая версия, желаете обновиться?')) {\n      window.location.reload();\n    }\n  },\n});\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(sendWebVitalsToGoogleAnalytics);\n","import type { Metric } from 'web-vitals';\n\nexport function sendWebVitalsToGoogleAnalytics({ name, delta, value, id }: Metric) {\n  // Assumes the global `gtag()` function exists, see:\n  // https://developers.google.com/analytics/devguides/collection/ga4\n  gtag?.('event', name, {\n    // Built-in params:\n    value: delta, // Use `delta` so the value can be summed.\n    // Custom params:\n    metric_id: id, // Needed to aggregate events.\n    metric_value: value, // Optional.\n    metric_delta: delta, // Optional.\n\n    // OPTIONAL: any additional params or debug info here.\n    // See: https://web.dev/debug-web-vitals-in-the-field/\n    // metric_rating: 'good' | 'ni' | 'poor',\n    // debug_info: '...',\n    // ...\n  });\n}\n"],"sourceRoot":""}