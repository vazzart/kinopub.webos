{"version":3,"sources":["components/collectionItem/collectionItem.tsx","components/collectionsList/collectionsList.tsx","containers/collectionsListInfinite/collectionsListInfinite.tsx","views/collections/collections.tsx","hooks/useInViewport.ts","hooks/useUniqueId.ts","components/scrollable/scrollable.tsx","components/seo/seo.tsx","components/title/title.tsx","components/lazy/lazy.tsx","components/imageItem/imageItem.tsx","utils/number.ts","hooks/useInfiniteItems.ts","hooks/useApiInfinite.ts","components/input/input.tsx"],"names":["CollectionItem","collection","className","history","useHistory","views","useMemo","numberToHuman","handleOnClick","useCallback","id","push","generatePath","PATHS","Collection","collectionId","title","onClick","source","posters","medium","caption","cx","name","CollectionsList","collections","loading","onScrollToEnd","scrollable","content","map","Array","_","idx","CollectionsListInfinite","queryResult","processItems","useInfiniteItems","items","isLoading","fetchMore","COLLECTION_TYPES","created","watchers","CollectionsView","useParams","collectionType","useState","query","setQuery","useApiInfinite","getGenreByType","handleQueryChange","value","collectionTypeName","collectionTypeKey","replace","active","href","Collections","placeholder","onChange","useInViewport","target","props","options","config","disconnectOnLeave","onEnterViewport","onLeaveViewport","forceUpdate","observer","useRef","inViewportRef","intersected","enterCountRef","leaveCountRef","startObserver","current","node","findDOMNode","observe","stopObserver","unobserve","disconnect","handleIntersection","entries","entry","isIntersecting","intersectionRatio","isInViewport","initIntersectionObserver","IntersectionObserver","useEffect","inViewport","enterCount","leaveCount","useUniqueId","prefix","uid","useUID","ScrollableContext","createContext","Scrollable","children","footerRef","Provider","ref","Seo","Helmet","defaultTitle","titleTemplate","Title","as","Lazy","scrollableId","useContext","once","offset","scrollContainer","ImageItem","wrapperClassName","src","alt","number","millify","data","isFetchingNextPage","fetchNextPage","canFetchNextPage","setCanFetchNextPage","uniqBy","filter","flatMap","pages","page","processedItems","handleLoadMore","length","method","params","client","ApiClient","useInfiniteQuery","pageParam","getNextPageParam","lastPage","pagination","Input","autoFocus","inputRef","handleChange","frameId","requestAnimationFrame","domNode","querySelector","focus","cancelAnimationFrame"],"mappings":"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","file":"static/js/24.93c104aa.chunk.js","sourcesContent":["import { useCallback, useMemo } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport cx from 'classnames';\n\nimport { Collection } from 'api';\nimport Icon from 'components/icon';\nimport ImageItem from 'components/imageItem';\nimport { PATHS, generatePath } from 'routes';\n\nimport { numberToHuman } from 'utils/number';\n\ntype Props = {\n  collection?: Collection;\n  className?: string;\n};\n\nconst CollectionItem: React.FC<Props> = ({ collection, className }) => {\n  const history = useHistory();\n  const views = useMemo(() => (collection?.views && numberToHuman(collection?.views)) || '', [collection?.views]);\n  const handleOnClick = useCallback(() => {\n    if (collection?.id) {\n      history.push(\n        generatePath(PATHS.Collection, {\n          collectionId: collection.id,\n        }),\n        {\n          collection,\n          title: collection.title,\n        },\n      );\n    }\n  }, [collection, history]);\n\n  return (\n    <ImageItem onClick={handleOnClick} source={collection?.posters.medium} caption={collection?.title} className={cx('h-72', className)}>\n      {views && (\n        <div className=\"absolute top-2 right-2 h-6 pr-2 text-xs text-gray-200 bg-black bg-opacity-50 rounded flex items-center\">\n          <Icon name=\"visibility\" />\n          {views}\n        </div>\n      )}\n    </ImageItem>\n  );\n};\n\nexport default CollectionItem;\n","import React from 'react';\nimport map from 'lodash/map';\n\nimport { Collection } from 'api';\nimport CollectionItem from 'components/collectionItem';\nimport Scrollable from 'components/scrollable';\nimport Title from 'components/title';\n\ntype Props = {\n  title?: React.ReactNode;\n  collections?: Collection[];\n  loading?: boolean;\n  onScrollToEnd?: () => void;\n  scrollable?: boolean;\n};\n\nconst CollectionsList: React.FC<Props> = ({ title, collections, loading, onScrollToEnd, scrollable = true }) => {\n  const content = (\n    <div>\n      <Title>{title}</Title>\n      <div className=\"flex flex-wrap pr-2\">\n        {map(collections, (collection) => (\n          <CollectionItem key={collection.id} collection={collection} />\n        ))}\n        {loading && map([...new Array(15)], (_, idx) => <CollectionItem key={idx} />)}\n      </div>\n    </div>\n  );\n\n  return scrollable ? <Scrollable onScrollToEnd={onScrollToEnd}>{content}</Scrollable> : content;\n};\n\nexport default CollectionsList;\n","import { Collection } from 'api';\nimport CollectionsList from 'components/collectionsList';\nimport useInfiniteItems, { QueryResult } from 'hooks/useInfiniteItems';\n\ntype Props = {\n  title?: React.ReactNode;\n  queryResult: QueryResult;\n  processItems?: (items: Collection[]) => Collection[];\n};\n\nconst CollectionsListInfinite: React.FC<Props> = ({ title, queryResult, processItems }) => {\n  const [items, isLoading, fetchMore] = useInfiniteItems(queryResult, processItems);\n\n  return <CollectionsList title={title} collections={items} loading={isLoading} onScrollToEnd={fetchMore} />;\n};\n\nexport default CollectionsListInfinite;\n","import React, { useCallback, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport map from 'lodash/map';\n\nimport Input from 'components/input';\nimport Link from 'components/link';\nimport Seo from 'components/seo';\nimport Text from 'components/text';\nimport CollectionsListInfinite from 'containers/collectionsListInfinite';\nimport useApiInfinite from 'hooks/useApiInfinite';\nimport { PATHS, RouteParams, generatePath } from 'routes';\n\nconst COLLECTION_TYPES = {\n  created: 'Новые',\n  watchers: 'Популярные',\n  views: 'Просматриваемые',\n} as const;\n\ntype CollectionsType = keyof typeof COLLECTION_TYPES;\n\nconst getGenreByType = (collectionType?: CollectionsType) => {\n  return (collectionType ? COLLECTION_TYPES[collectionType] : collectionType) || '';\n};\n\nconst CollectionsView: React.FC = () => {\n  const { collectionType = 'created' } = useParams<RouteParams>();\n  const [query, setQuery] = useState('');\n  const queryResult = useApiInfinite('collections', [query, `${collectionType}-`]);\n  const title = getGenreByType(collectionType as CollectionsType);\n\n  const handleQueryChange = useCallback(\n    (value) => {\n      setQuery(value);\n    },\n    [setQuery],\n  );\n\n  return (\n    <>\n      <Seo title={`Подборки: ${title}`} />\n      <CollectionsListInfinite\n        title={\n          <div className=\"w-full\">\n            <div className=\"flex justify-between items-center mb-3\">\n              <Text>{title}</Text>\n              <div className=\"flex\">\n                {map(COLLECTION_TYPES, (collectionTypeName, collectionTypeKey) => (\n                  <Link\n                    key={collectionTypeKey}\n                    className=\"mr-2\"\n                    replace\n                    active={collectionType === collectionTypeKey}\n                    href={generatePath(PATHS.Collections, { collectionType: collectionTypeKey })}\n                  >\n                    {collectionTypeName}\n                  </Link>\n                ))}\n              </div>\n            </div>\n            <div className=\"mr-2\">\n              <Input placeholder=\"Название подборки...\" value={query} onChange={handleQueryChange} />\n            </div>\n          </div>\n        }\n        queryResult={queryResult}\n      />\n    </>\n  );\n};\n\nexport default CollectionsView;\n","import { useCallback, useEffect, useRef, useState } from 'react';\nimport { findDOMNode } from 'react-dom';\n\ntype Props = {\n  onEnterViewport?: () => void;\n  onLeaveViewport?: () => void;\n};\n\nconst useInViewport = (\n  target: React.MutableRefObject<React.ReactInstance | null | undefined>,\n  props: Props,\n  options?: IntersectionObserverInit,\n  config = { disconnectOnLeave: false },\n) => {\n  const { onEnterViewport, onLeaveViewport } = props;\n  const [, forceUpdate] = useState();\n\n  const observer = useRef<IntersectionObserver | null>(null);\n\n  const inViewportRef = useRef(false);\n  const intersected = useRef(false);\n\n  const enterCountRef = useRef(0);\n  const leaveCountRef = useRef(0);\n\n  const startObserver = useCallback(() => {\n    if (target.current && observer.current) {\n      const node = findDOMNode(target.current) as Element;\n      if (node) {\n        observer.current.observe(node);\n      }\n    }\n  }, [target, observer]);\n\n  const stopObserver = useCallback(() => {\n    if (target.current && observer.current) {\n      const node = findDOMNode(target.current) as Element;\n      if (node) {\n        observer.current.unobserve(node);\n        observer.current.disconnect();\n        observer.current = null;\n      }\n    }\n  }, [target, observer]);\n\n  const handleIntersection = useCallback(\n    (entries) => {\n      const entry = entries[0] || {};\n      const { isIntersecting, intersectionRatio } = entry;\n      const isInViewport = typeof isIntersecting !== 'undefined' ? isIntersecting : intersectionRatio > 0;\n\n      // enter\n      if (!intersected.current && isInViewport) {\n        intersected.current = true;\n\n        onEnterViewport?.();\n\n        enterCountRef.current += 1;\n        inViewportRef.current = isInViewport;\n\n        forceUpdate(isInViewport);\n\n        return;\n      }\n\n      // leave\n      if (intersected.current && !isInViewport) {\n        intersected.current = false;\n\n        onLeaveViewport?.();\n\n        if (config.disconnectOnLeave && observer.current) {\n          // disconnect obsever on leave\n          observer.current.disconnect();\n        }\n\n        leaveCountRef.current += 1;\n        inViewportRef.current = isInViewport;\n\n        forceUpdate(isInViewport);\n      }\n    },\n    [observer, config.disconnectOnLeave, onEnterViewport, onLeaveViewport],\n  );\n\n  const initIntersectionObserver = useCallback(() => {\n    if (!observer.current) {\n      observer.current = new IntersectionObserver(handleIntersection, options);\n    }\n  }, [observer, options, handleIntersection]);\n\n  useEffect(() => {\n    initIntersectionObserver();\n    startObserver();\n\n    return () => {\n      stopObserver();\n    };\n  }, [initIntersectionObserver, startObserver, stopObserver]);\n\n  return {\n    inViewport: inViewportRef.current,\n    enterCount: enterCountRef.current,\n    leaveCount: leaveCountRef.current,\n  };\n};\n\nexport default useInViewport;\n","import { useMemo } from 'react';\nimport { useUID } from 'react-uid';\n\nfunction useUniqueId(prefix: string) {\n  const uid = useUID();\n  const id = useMemo(() => `${prefix}-${uid}`, [prefix, uid]);\n\n  return id;\n}\n\nexport default useUniqueId;\n","import { createContext, useMemo, useRef } from 'react';\nimport cx from 'classnames';\n\nimport useInViewport from 'hooks/useInViewport';\nimport useUniqueId from 'hooks/useUniqueId';\n\nexport const ScrollableContext = createContext<{ id?: string }>({});\n\ntype Props = {\n  onScrollToEnd?: () => void;\n  className?: string;\n} & React.HTMLAttributes<HTMLDivElement>;\n\nconst Scrollable: React.FC<Props> = ({ children, className, onScrollToEnd, ...props }) => {\n  const footerRef = useRef<HTMLDivElement>(null);\n  const id = useUniqueId('scrollable');\n  const value = useMemo(\n    () => ({\n      id,\n    }),\n    [id],\n  );\n\n  useInViewport(footerRef, { onEnterViewport: onScrollToEnd });\n\n  return (\n    <div className={cx('overflow-y-auto h-full', className)} {...props} id={id}>\n      <ScrollableContext.Provider value={value}>{children}</ScrollableContext.Provider>\n      {onScrollToEnd && <div className=\"h-40\" ref={footerRef} />}\n    </div>\n  );\n};\n\nexport default Scrollable;\n","import { Helmet, HelmetProps } from 'react-helmet';\n\ntype Props = {} & HelmetProps;\n\nconst Seo: React.FC<Props> = (props) => {\n  return <Helmet defaultTitle=\"Unknown\" titleTemplate=\"%s | Kinopub WebOS\" {...props} />;\n};\n\nexport default Seo;\n","import cx from 'classnames';\n\nimport Text, { TextProps } from 'components/text';\n\ntype Props = {} & TextProps;\n\nconst Title: React.FC<Props> = ({ children, className, ...props }) => {\n  if (!children) {\n    return null;\n  }\n\n  return (\n    <Text {...props} className={cx('flex justify-between items-center m-1 mb-3 min-h-9', className)} as=\"div\">\n      {children}\n    </Text>\n  );\n};\n\nexport default Title;\n","import { useContext } from 'react';\nimport LazyLoad, { LazyLoadProps } from 'react-lazyload';\n\nimport { ScrollableContext } from 'components/scrollable';\n\ntype Props = {\n  className?: string;\n} & Omit<LazyLoadProps, 'placeholder'>;\n\nconst Lazy: React.FC<Props> = (props) => {\n  const { id: scrollableId } = useContext(ScrollableContext);\n\n  return (\n    <LazyLoad\n      once\n      offset={100}\n      scrollContainer={scrollableId && `#${scrollableId}`}\n      {...props}\n      placeholder={<div className=\"w-full h-full\" />}\n    />\n  );\n};\n\nexport function withLazy(options: Props) {\n  return function WithLazy<P>(Component: React.ComponentType<P>): React.FC<P> {\n    return (props: P) => (\n      <Lazy {...options}>\n        <Component {...props} />\n      </Lazy>\n    );\n  };\n}\n\nexport default Lazy;\n","import cx from 'classnames';\n\nimport Lazy from 'components/lazy';\nimport Spottable from 'components/spottable';\n\ntype Props = {\n  className?: string;\n  wrapperClassName?: string;\n  source?: string;\n  caption?: string;\n} & React.HTMLAttributes<HTMLDivElement>;\n\nconst ImageItem: React.FC<Props> = ({ className, wrapperClassName, source, caption, children, ...props }) => {\n  return (\n    <Spottable {...props} className={cx('rounded-xl w-1/5 cursor-pointer', wrapperClassName)}>\n      <Lazy className={cx('h-40 m-1 flex flex-col relative', className)}>\n        <img\n          loading=\"lazy\"\n          className=\"w-full h-full object-cover rounded-xl border-2 border-gray-300 bg-gray-300\"\n          src={source}\n          alt={caption}\n        />\n\n        {children}\n      </Lazy>\n      {caption && (\n        <div className=\"px-2\">\n          <p className=\"text-gray-200 text-sm text-center overflow-hidden overflow-ellipsis whitespace-nowrap\">{caption}</p>\n        </div>\n      )}\n    </Spottable>\n  );\n};\n\nexport default ImageItem;\n","import millify from 'millify';\n\nexport function numberToHuman(number: number) {\n  return millify(number);\n}\n","import { useCallback, useEffect, useMemo, useState } from 'react';\nimport filter from 'lodash/filter';\nimport flatMap from 'lodash/flatMap';\nimport uniqBy from 'lodash/uniqBy';\n\nimport useApiInfinite from 'hooks/useApiInfinite';\n\ntype PageWithItems<T> = {\n  items: T[];\n};\n\nexport type QueryResult = ReturnType<typeof useApiInfinite>;\n\nfunction useInfiniteItems<T>(queryResult: QueryResult, processItems?: (items: T[]) => T[]) {\n  const { data, isLoading, isFetchingNextPage, fetchNextPage } = queryResult;\n  const [canFetchNextPage, setCanFetchNextPage] = useState(false);\n\n  const items = useMemo(\n    () => uniqBy(filter(flatMap<PageWithItems<T>, T>(data?.pages as unknown as PageWithItems<T>[], (page) => page.items)), 'id'),\n    [data?.pages],\n  );\n  const processedItems = useMemo(() => (processItems ? processItems(items) : items), [items, processItems]);\n\n  const handleLoadMore = useCallback(() => {\n    if (canFetchNextPage) {\n      fetchNextPage();\n      setCanFetchNextPage(false);\n    }\n  }, [canFetchNextPage, fetchNextPage]);\n\n  useEffect(() => {\n    setCanFetchNextPage(true);\n  }, [items.length]);\n\n  return [processedItems, isLoading || isFetchingNextPage, handleLoadMore] as const;\n}\n\nexport default useInfiniteItems;\n","import { useMemo } from 'react';\nimport { UseInfiniteQueryOptions, useInfiniteQuery } from 'react-query';\n\nimport ApiClient, { PaginationResponse } from 'api';\n\nimport { Method, Methods } from './useApi';\n\nfunction useApiInfinite<T extends Method>(\n  method: T,\n  params: Parameters<ApiClient[T]> = [] as Parameters<ApiClient[T]>,\n  options?: UseInfiniteQueryOptions<Methods[T]>,\n) {\n  const client = useMemo(() => new ApiClient(), []);\n  const query = useInfiniteQuery<Methods[T], string, Methods[T]>(\n    [method, ...params],\n    ({ pageParam }) => {\n      // @ts-expect-error\n      return client[method](...params, pageParam) as Methods[T];\n    },\n    {\n      // @ts-expect-error\n      getNextPageParam: (lastPage: PaginationResponse) => {\n        return lastPage?.pagination?.current + 1 || 1;\n      },\n      ...options,\n    },\n  );\n\n  return query;\n}\n\nexport default useApiInfinite;\n","import { useCallback, useEffect, useRef } from 'react';\nimport { findDOMNode } from 'react-dom';\nimport InputBase, { InputProps } from '@enact/moonstone/Input';\nimport cx from 'classnames';\n\ntype Props = {\n  onChange?: (value: string) => void;\n  className?: string;\n} & InputProps;\n\nconst Input: React.FC<Props> = ({ className, onChange, autoFocus, ...props }) => {\n  const inputRef = useRef<HTMLInputElement>(null);\n  const handleChange = useCallback(\n    ({ value }: { value: string }) => {\n      onChange?.(value);\n    },\n    [onChange],\n  );\n\n  useEffect(() => {\n    let frameId: number;\n\n    if (autoFocus) {\n      frameId = requestAnimationFrame(() => {\n        const domNode = findDOMNode(inputRef.current) as HTMLDivElement;\n        domNode?.querySelector('input')?.focus();\n      });\n    }\n\n    return () => {\n      if (frameId) {\n        cancelAnimationFrame(frameId);\n      }\n    };\n  }, [inputRef, autoFocus]);\n\n  return (\n    <InputBase\n      {...props}\n      // @ts-expect-error\n      ref={inputRef}\n      className={cx('w-full', className)}\n      onChange={handleChange}\n    />\n  );\n};\n\nexport default Input;\n"],"sourceRoot":""}