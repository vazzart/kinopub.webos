{"version":3,"sources":["../node_modules/lodash/sumBy.js","../node_modules/lodash/_baseSum.js","views/watching/watching.tsx","hooks/useApi.ts","../node_modules/react-query/es/react/useQuery.js"],"names":["baseIteratee","require","baseSum","module","exports","array","iteratee","length","result","index","current","undefined","WATCHING_TYPES_MAP","serials","movies","WatchingView","useParams","watchingType","useApi","capitalize","Bool","True","data","isLoading","total","useMemo","sumBy","items","item","new","seoTitle","title","className","map","watchingTypeName","watchingTypeKey","replace","active","href","generatePath","PATHS","Watching","loading","method","params","options","client","ApiClient","query","useQuery","arg1","arg2","arg3","parsedOptions","parseQueryArgs","useBaseQuery","QueryObserver"],"mappings":"2GAAA,IAAIA,EAAeC,EAAQ,KACvBC,EAAUD,EAAQ,MA+BtBE,EAAOC,QANP,SAAeC,EAAOC,GACpB,OAAQD,GAASA,EAAME,OACnBL,EAAQG,EAAOL,EAAaM,EAAU,IACtC,I,mBCNNH,EAAOC,QAdP,SAAiBC,EAAOC,GAKtB,IAJA,IAAIE,EACAC,GAAS,EACTF,EAASF,EAAME,SAEVE,EAAQF,GAAQ,CACvB,IAAIG,EAAUJ,EAASD,EAAMI,SACbE,IAAZD,IACFF,OAAoBG,IAAXH,EAAuBE,EAAWF,EAASE,GAGxD,OAAOF,I,gOCNHI,EAAqB,CACzBC,QAAS,6CACTC,OAAQ,wCA0CKC,EArCgB,WAC7B,MAAqCC,cAA7BC,oBAAR,MAAuB,UAAvB,EACA,EAA4BC,YAAO,WAAD,OAAYC,IAAWF,IAA8C,CAACG,IAAKC,OAArGC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,UACRC,EAAQC,mBAAQ,kBAAMC,IAAK,OAACJ,QAAD,IAACA,OAAD,EAACA,EAAMK,OAAO,SAACC,GAAD,QAAYA,EAAKC,KAAO,QAAK,QAACP,QAAD,IAACA,OAAD,EAACA,EAAMK,QAC7EG,EAA4B,YAAjBb,EAA6B,4EAAkB,4HAC1Dc,EAAQP,EAAK,UAAMM,EAAN,aAAmBN,EAAnB,KAA8BM,EAEjD,OACE,qCACE,cAAC,IAAD,CAAKC,MAAOD,IACZ,cAAC,IAAD,CACEC,MACE,qCACE,cAAC,IAAD,UAAOA,IAEP,qBAAKC,UAAU,OAAf,SACGC,IAAIrB,GAAoB,SAACsB,EAAkBC,GAAnB,OACvB,cAAC,IAAD,CAEEH,UAAU,OACVI,SAAO,EACPC,OAAQpB,IAAiBkB,EACzBG,KAAMC,YAAaC,IAAMC,SAAU,CAAExB,aAAckB,IALrD,SAOGD,GANIC,WAYfR,MAAK,OAAEL,QAAF,IAAEA,OAAF,EAAEA,EAAMK,MACbe,QAASnB,S,uECtBFL,IAjBf,SACEyB,GAGC,IAFDC,EAEA,uDAFmC,GACnCC,EACA,uCACMC,EAASrB,mBAAQ,kBAAM,IAAIsB,MAAa,IACxCC,EAAQC,YAAQ,CACnBN,GADmB,mBACRC,KACZ,kBAEEE,EAAOH,GAAP,MAAAG,EAAM,YAAYF,MACpBC,GAGF,OAAOG,I,iCC3BT,+DAIO,SAASC,EAASC,EAAMC,EAAMC,GACnC,IAAIC,EAAgBC,YAAeJ,EAAMC,EAAMC,GAC/C,OAAOG,YAAaF,EAAeG","file":"static/js/29.f23b9eda.chunk.js","sourcesContent":["var baseIteratee = require('./_baseIteratee'),\n    baseSum = require('./_baseSum');\n\n/**\n * This method is like `_.sum` except that it accepts `iteratee` which is\n * invoked for each element in `array` to generate the value to be summed.\n * The iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Math\n * @param {Array} array The array to iterate over.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {number} Returns the sum.\n * @example\n *\n * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n *\n * _.sumBy(objects, function(o) { return o.n; });\n * // => 20\n *\n * // The `_.property` iteratee shorthand.\n * _.sumBy(objects, 'n');\n * // => 20\n */\nfunction sumBy(array, iteratee) {\n  return (array && array.length)\n    ? baseSum(array, baseIteratee(iteratee, 2))\n    : 0;\n}\n\nmodule.exports = sumBy;\n","/**\n * The base implementation of `_.sum` and `_.sumBy` without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {number} Returns the sum.\n */\nfunction baseSum(array, iteratee) {\n  var result,\n      index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var current = iteratee(array[index]);\n    if (current !== undefined) {\n      result = result === undefined ? current : (result + current);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseSum;\n","import React, { useMemo } from 'react';\nimport { generatePath, useParams } from 'react-router-dom';\nimport capitalize from 'lodash/capitalize';\nimport map from 'lodash/map';\nimport sumBy from 'lodash/sumBy';\n\nimport { Bool } from 'api';\nimport ItemsList from 'components/itemsList';\nimport Link from 'components/link';\nimport Seo from 'components/seo';\nimport Text from 'components/text';\nimport useApi from 'hooks/useApi';\nimport { PATHS, RouteParams } from 'routes';\n\nconst WATCHING_TYPES_MAP = {\n  serials: 'Сериалы',\n  movies: 'Фильмы',\n} as const;\n\ntype WatchingTypes = keyof typeof WATCHING_TYPES_MAP;\n\nconst WatchingView: React.FC = () => {\n  const { watchingType = 'serials' } = useParams<RouteParams>();\n  const { data, isLoading } = useApi(`watching${capitalize(watchingType) as Capitalize<WatchingTypes>}`, [Bool.True]);\n  const total = useMemo(() => sumBy(data?.items, (item) => +(item.new || 0)), [data?.items]);\n  const seoTitle = watchingType === 'serials' ? 'Новые эпизоды' : 'Недосмотренные фильмы';\n  const title = total ? `${seoTitle} (${total})` : seoTitle;\n\n  return (\n    <>\n      <Seo title={seoTitle} />\n      <ItemsList\n        title={\n          <>\n            <Text>{title}</Text>\n\n            <div className=\"flex\">\n              {map(WATCHING_TYPES_MAP, (watchingTypeName, watchingTypeKey) => (\n                <Link\n                  key={watchingTypeKey}\n                  className=\"mr-2\"\n                  replace\n                  active={watchingType === watchingTypeKey}\n                  href={generatePath(PATHS.Watching, { watchingType: watchingTypeKey })}\n                >\n                  {watchingTypeName}\n                </Link>\n              ))}\n            </div>\n          </>\n        }\n        items={data?.items}\n        loading={isLoading}\n      />\n    </>\n  );\n};\n\nexport default WatchingView;\n","import { useMemo } from 'react';\nimport { UseQueryOptions, useQuery } from 'react-query';\n\nimport ApiClient from 'api';\n\ntype Unpromise<T> = T extends Promise<infer U> ? U : T;\n\nexport type Methods = {\n  [method in keyof ApiClient]: ApiClient[method] extends Function ? Unpromise<ReturnType<ApiClient[method]>> : never;\n};\n\nexport type Method = keyof ApiClient & string;\n\nfunction useApi<T extends Method>(\n  method: T,\n  params: Parameters<ApiClient[T]> = [] as Parameters<ApiClient[T]>,\n  options?: UseQueryOptions<Methods[T]>,\n) {\n  const client = useMemo(() => new ApiClient(), []);\n  const query = useQuery<Methods[T]>(\n    [method, ...params],\n    () =>\n      // @ts-expect-error\n      client[method](...params) as Methods[T],\n    options,\n  );\n\n  return query;\n}\n\nexport default useApi;\n","import { QueryObserver } from '../core';\nimport { parseQueryArgs } from '../core/utils';\nimport { useBaseQuery } from './useBaseQuery'; // HOOK\n\nexport function useQuery(arg1, arg2, arg3) {\n  var parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n  return useBaseQuery(parsedOptions, QueryObserver);\n}"],"sourceRoot":""}